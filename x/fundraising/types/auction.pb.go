// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: modules/fundraising/v1/auction.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuctionType enumerates the valid types of an auction.
type AuctionType int32

const (
	// AUCTION_TYPE_UNSPECIFIED defines the default auction type
	AuctionTypeNil AuctionType = 0
	// AUCTION_TYPE_FIXED_PRICE defines the fixed price auction type
	AuctionTypeFixedPrice AuctionType = 1
	// AUCTION_TYPE_BATCH defines the batch auction type
	AuctionTypeBatch AuctionType = 2
)

var AuctionType_name = map[int32]string{
	0: "AUCTION_TYPE_UNSPECIFIED",
	1: "AUCTION_TYPE_FIXED_PRICE",
	2: "AUCTION_TYPE_BATCH",
}

var AuctionType_value = map[string]int32{
	"AUCTION_TYPE_UNSPECIFIED": 0,
	"AUCTION_TYPE_FIXED_PRICE": 1,
	"AUCTION_TYPE_BATCH":       2,
}

func (x AuctionType) String() string {
	return proto.EnumName(AuctionType_name, int32(x))
}

func (AuctionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d935614728751a75, []int{0}
}

// AuctionStatus enumerates the valid status of an auction.
type AuctionStatus int32

const (
	// AUCTION_STATUS_UNSPECIFIED defines the default auction status
	AuctionStatusNil AuctionStatus = 0
	// AUCTION_STATUS_STANDBY defines the standby auction status
	AuctionStatusStandBy AuctionStatus = 1
	// AUCTION_STATUS_STARTED defines the started auction status
	AuctionStatusStarted AuctionStatus = 2
	// AUCTION_STATUS_VESTING defines the vesting auction status
	AuctionStatusVesting AuctionStatus = 3
	// AUCTION_STATUS_FINISHED defines the finished auction status
	AuctionStatusFinished AuctionStatus = 4
	// AUCTION_STATUS_CANCELLED defines the cancelled auction status
	AuctionStatusCancelled AuctionStatus = 5
)

var AuctionStatus_name = map[int32]string{
	0: "AUCTION_STATUS_UNSPECIFIED",
	1: "AUCTION_STATUS_STANDBY",
	2: "AUCTION_STATUS_STARTED",
	3: "AUCTION_STATUS_VESTING",
	4: "AUCTION_STATUS_FINISHED",
	5: "AUCTION_STATUS_CANCELLED",
}

var AuctionStatus_value = map[string]int32{
	"AUCTION_STATUS_UNSPECIFIED": 0,
	"AUCTION_STATUS_STANDBY":     1,
	"AUCTION_STATUS_STARTED":     2,
	"AUCTION_STATUS_VESTING":     3,
	"AUCTION_STATUS_FINISHED":    4,
	"AUCTION_STATUS_CANCELLED":   5,
}

func (x AuctionStatus) String() string {
	return proto.EnumName(AuctionStatus_name, int32(x))
}

func (AuctionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d935614728751a75, []int{1}
}

// BaseAuction defines a base auction type. It contains all the necessary fields
// for basic auction functionality. Any custom auction type should extend this
// type for additional functionality (e.g. batch auction, fixed price
// auction).
type BaseAuction struct {
	// auction_id specifies index of the auction
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// type specifies the auction type
	// type 1 is fixed price and 2 is batch auction
	Type AuctionType `protobuf:"varint,2,opt,name=type,proto3,enum=modules.fundraising.v1.AuctionType" json:"type,omitempty"`
	// auctioneer specifies the bech32-encoded address that creates the auction
	Auctioneer string `protobuf:"bytes,3,opt,name=auctioneer,proto3" json:"auctioneer,omitempty"`
	// selling_reserve_address specifies the bech32-encoded address that has all
	// the selling coin
	SellingReserveAddress string `protobuf:"bytes,4,opt,name=selling_reserve_address,json=sellingReserveAddress,proto3" json:"selling_reserve_address,omitempty"`
	// paying_reserve_address specifies the bech32-encoded address that has all
	// the paying coin
	PayingReserveAddress string `protobuf:"bytes,5,opt,name=paying_reserve_address,json=payingReserveAddress,proto3" json:"paying_reserve_address,omitempty"`
	// start_price specifies the starting price of the auction
	// it is determined by the proportion of the price of paying coin denom
	StartPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=start_price,json=startPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"start_price"`
	// selling_coin specifies the selling coin for the auction
	SellingCoin types.Coin `protobuf:"bytes,7,opt,name=selling_coin,json=sellingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"selling_coin"`
	// paying_coin_denom specifies the paying coin denom that bidders use to bid
	// for
	PayingCoinDenom string `protobuf:"bytes,8,opt,name=paying_coin_denom,json=payingCoinDenom,proto3" json:"paying_coin_denom,omitempty"`
	// vesting_reserve_address specifies the bech32-encoded vesting address that
	// holds vesting amounts of coin
	VestingReserveAddress string `protobuf:"bytes,9,opt,name=vesting_reserve_address,json=vestingReserveAddress,proto3" json:"vesting_reserve_address,omitempty"`
	// vesting_schedules specifies the vesting schedules for the auction
	VestingSchedules []VestingSchedule `protobuf:"bytes,10,rep,name=vesting_schedules,json=vestingSchedules,proto3" json:"vesting_schedules"`
	// start_time specifies the start time of the plan
	StartTime time.Time `protobuf:"bytes,11,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// end_time specifies the end time of the plan
	EndTime []time.Time `protobuf:"bytes,12,rep,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// status specifies the auction status
	Status AuctionStatus `protobuf:"varint,13,opt,name=status,proto3,enum=modules.fundraising.v1.AuctionStatus" json:"status,omitempty"`
}

func (m *BaseAuction) Reset()         { *m = BaseAuction{} }
func (m *BaseAuction) String() string { return proto.CompactTextString(m) }
func (*BaseAuction) ProtoMessage()    {}
func (*BaseAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d935614728751a75, []int{0}
}
func (m *BaseAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseAuction.Merge(m, src)
}
func (m *BaseAuction) XXX_Size() int {
	return m.Size()
}
func (m *BaseAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseAuction.DiscardUnknown(m)
}

var xxx_messageInfo_BaseAuction proto.InternalMessageInfo

// FixedPriceAuction defines the fixed price auction type. It is the most
// simpliest way to raise funds. An auctioneer sets the starting price for each
// selling amounts of coin and bidders bid to purchase based on the fixed price.
type FixedPriceAuction struct {
	*BaseAuction `protobuf:"bytes,1,opt,name=base_auction,json=baseAuction,proto3,embedded=base_auction" json:"base_auction,omitempty"`
	// remaining_selling_coin specifies the remaining amount of selling coin to sell
	RemainingSellingCoin types.Coin `protobuf:"bytes,2,opt,name=remaining_selling_coin,json=remainingSellingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"remaining_selling_coin"`
}

func (m *FixedPriceAuction) Reset()         { *m = FixedPriceAuction{} }
func (m *FixedPriceAuction) String() string { return proto.CompactTextString(m) }
func (*FixedPriceAuction) ProtoMessage()    {}
func (*FixedPriceAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d935614728751a75, []int{1}
}
func (m *FixedPriceAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedPriceAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixedPriceAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixedPriceAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedPriceAuction.Merge(m, src)
}
func (m *FixedPriceAuction) XXX_Size() int {
	return m.Size()
}
func (m *FixedPriceAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedPriceAuction.DiscardUnknown(m)
}

var xxx_messageInfo_FixedPriceAuction proto.InternalMessageInfo

// BatchAuction defines a batch auction type. It allows bidders to participate
// in the auction by placing their limit orders with a bid price they are
// willing to bid within the auction period. They can place multiple bids with
// different bid prices and if they want to modify their existing bid, they only
// have an option to modify with a higher bid price. Under the hood, an order
// book is created to record the bids to calculate the matched bidders.
type BatchAuction struct {
	*BaseAuction `protobuf:"bytes,1,opt,name=base_auction,json=baseAuction,proto3,embedded=base_auction" json:"base_auction,omitempty"`
	// min_bid_price specifies the minimum bid price
	MinBidPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=min_bid_price,json=minBidPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_bid_price"`
	// matched_price specifies the matched price of the auction
	MatchedPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=matched_price,json=matchedPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"matched_price"`
	// max_extended_round specifies a maximum number of extended rounds
	MaxExtendedRound uint32 `protobuf:"varint,4,opt,name=max_extended_round,json=maxExtendedRound,proto3" json:"max_extended_round,omitempty"`
	// extended_round_rate specifies the rate that decides if the auction needs
	// another round
	ExtendedRoundRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=extended_round_rate,json=extendedRoundRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"extended_round_rate"`
}

func (m *BatchAuction) Reset()         { *m = BatchAuction{} }
func (m *BatchAuction) String() string { return proto.CompactTextString(m) }
func (*BatchAuction) ProtoMessage()    {}
func (*BatchAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d935614728751a75, []int{2}
}
func (m *BatchAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchAuction.Merge(m, src)
}
func (m *BatchAuction) XXX_Size() int {
	return m.Size()
}
func (m *BatchAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchAuction.DiscardUnknown(m)
}

var xxx_messageInfo_BatchAuction proto.InternalMessageInfo

// VestingSchedule defines the vesting schedule for the owner of an auction.
type VestingSchedule struct {
	// release_time specifies the time for distribution of the vesting coin
	ReleaseTime time.Time `protobuf:"bytes,1,opt,name=release_time,json=releaseTime,proto3,stdtime" json:"release_time"`
	// weight specifies the vesting weight for the schedule
	Weight cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight"`
}

func (m *VestingSchedule) Reset()         { *m = VestingSchedule{} }
func (m *VestingSchedule) String() string { return proto.CompactTextString(m) }
func (*VestingSchedule) ProtoMessage()    {}
func (*VestingSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_d935614728751a75, []int{3}
}
func (m *VestingSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingSchedule.Merge(m, src)
}
func (m *VestingSchedule) XXX_Size() int {
	return m.Size()
}
func (m *VestingSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_VestingSchedule proto.InternalMessageInfo

func (m *VestingSchedule) GetReleaseTime() time.Time {
	if m != nil {
		return m.ReleaseTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("modules.fundraising.v1.AuctionType", AuctionType_name, AuctionType_value)
	proto.RegisterEnum("modules.fundraising.v1.AuctionStatus", AuctionStatus_name, AuctionStatus_value)
	proto.RegisterType((*BaseAuction)(nil), "modules.fundraising.v1.BaseAuction")
	proto.RegisterType((*FixedPriceAuction)(nil), "modules.fundraising.v1.FixedPriceAuction")
	proto.RegisterType((*BatchAuction)(nil), "modules.fundraising.v1.BatchAuction")
	proto.RegisterType((*VestingSchedule)(nil), "modules.fundraising.v1.VestingSchedule")
}

func init() {
	proto.RegisterFile("modules/fundraising/v1/auction.proto", fileDescriptor_d935614728751a75)
}

var fileDescriptor_d935614728751a75 = []byte{
	// 1099 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdf, 0x6b, 0xdb, 0x56,
	0x14, 0xb6, 0x1c, 0x37, 0x4d, 0xae, 0x9d, 0x56, 0xd1, 0xd2, 0x4c, 0xd1, 0x98, 0x6d, 0xb2, 0x8d,
	0x86, 0xb0, 0x48, 0x4b, 0x16, 0xd6, 0x51, 0x18, 0xc3, 0xb2, 0x95, 0x54, 0x10, 0xbc, 0x20, 0x3b,
	0x61, 0xed, 0x8b, 0xb8, 0x96, 0x6e, 0xed, 0x4b, 0x2d, 0xc9, 0xe8, 0xca, 0x5e, 0xf2, 0x36, 0xd8,
	0x4b, 0xc9, 0x53, 0x9f, 0x07, 0x81, 0xb1, 0x31, 0x18, 0x63, 0x0f, 0x7d, 0xe8, 0x1f, 0x51, 0xf6,
	0x14, 0xf6, 0x34, 0xf6, 0x90, 0x8c, 0x64, 0x50, 0xd8, 0x5f, 0x31, 0xee, 0x0f, 0x37, 0xb2, 0x71,
	0xe9, 0x1a, 0xe8, 0x4b, 0x62, 0xdd, 0xf3, 0x7d, 0xdf, 0x3d, 0xf7, 0x9c, 0xef, 0x5c, 0x09, 0x7c,
	0x18, 0x44, 0x7e, 0xbf, 0x8b, 0x88, 0xf1, 0xb0, 0x1f, 0xfa, 0x31, 0xc4, 0x04, 0x87, 0x6d, 0x63,
	0xb0, 0x6e, 0xc0, 0xbe, 0x97, 0xe0, 0x28, 0xd4, 0x7b, 0x71, 0x94, 0x44, 0xca, 0xa2, 0x40, 0xe9,
	0x29, 0x94, 0x3e, 0x58, 0xd7, 0xe6, 0x61, 0x80, 0xc3, 0xc8, 0x60, 0x7f, 0x39, 0x54, 0x2b, 0x7a,
	0x11, 0x09, 0x22, 0x62, 0xb4, 0x20, 0x41, 0xc6, 0x60, 0xbd, 0x85, 0x12, 0xb8, 0x6e, 0x78, 0x11,
	0x16, 0x52, 0xda, 0x12, 0x8f, 0xbb, 0xec, 0xc9, 0xe0, 0x0f, 0x22, 0xb4, 0xd0, 0x8e, 0xda, 0x11,
	0x5f, 0xa7, 0xbf, 0xc4, 0x6a, 0xa9, 0x1d, 0x45, 0xed, 0x2e, 0x32, 0xd8, 0x53, 0xab, 0xff, 0xd0,
	0x48, 0x70, 0x80, 0x48, 0x02, 0x83, 0x1e, 0x07, 0x2c, 0xff, 0x33, 0x0d, 0xf2, 0x26, 0x24, 0xa8,
	0xc2, 0x53, 0x56, 0xde, 0x07, 0x40, 0x64, 0xef, 0x62, 0x5f, 0x95, 0xca, 0xd2, 0x4a, 0xce, 0x99,
	0x15, 0x2b, 0xb6, 0xaf, 0xdc, 0x01, 0xb9, 0xe4, 0xb0, 0x87, 0xd4, 0x6c, 0x59, 0x5a, 0xb9, 0xb1,
	0xf1, 0x81, 0x3e, 0xf9, 0x68, 0xba, 0x50, 0x6b, 0x1e, 0xf6, 0x90, 0xc3, 0x08, 0x4a, 0xf1, 0xa5,
	0x2e, 0x42, 0xb1, 0x3a, 0x55, 0x96, 0x56, 0x66, 0x9d, 0xd4, 0x8a, 0xf2, 0x19, 0x78, 0x97, 0xa0,
	0x6e, 0x17, 0x87, 0x6d, 0x37, 0x46, 0x04, 0xc5, 0x03, 0xe4, 0x42, 0xdf, 0x8f, 0x11, 0x21, 0x6a,
	0x8e, 0x81, 0x6f, 0x89, 0xb0, 0xc3, 0xa3, 0x15, 0x1e, 0x54, 0x36, 0xc1, 0x62, 0x0f, 0x1e, 0x4e,
	0xa2, 0x5d, 0x63, 0xb4, 0x05, 0x1e, 0x1d, 0x63, 0x39, 0x20, 0x4f, 0x12, 0x18, 0x27, 0x6e, 0x2f,
	0xc6, 0x1e, 0x52, 0xa7, 0x29, 0xd4, 0x5c, 0x7f, 0x7e, 0x5a, 0xca, 0xfc, 0x75, 0x5a, 0x7a, 0x8f,
	0xd7, 0x95, 0xf8, 0x8f, 0x74, 0x1c, 0x19, 0x01, 0x4c, 0x3a, 0xfa, 0x0e, 0x6a, 0x43, 0xef, 0xb0,
	0x86, 0xbc, 0x3f, 0x9e, 0xad, 0x01, 0x51, 0xf6, 0x1a, 0xf2, 0x1c, 0xc0, 0x54, 0x76, 0xa9, 0x88,
	0xf2, 0x9d, 0x04, 0x0a, 0xc3, 0x23, 0xd0, 0x96, 0xa9, 0xd7, 0xcb, 0xd2, 0x4a, 0x7e, 0x63, 0x49,
	0x17, 0x78, 0xda, 0x53, 0x5d, 0xf4, 0x54, 0xaf, 0x46, 0x38, 0x34, 0x2d, 0xba, 0xe1, 0xaf, 0x67,
	0xa5, 0xdb, 0x6d, 0x9c, 0x74, 0xfa, 0x2d, 0xdd, 0x8b, 0x02, 0xd1, 0x53, 0xf1, 0x6f, 0x8d, 0xf8,
	0x8f, 0x0c, 0x5a, 0x3e, 0xc2, 0x08, 0xdf, 0xbf, 0x78, 0xba, 0x5a, 0xe8, 0xb2, 0x54, 0xd8, 0x0e,
	0xe4, 0x97, 0x17, 0x4f, 0x57, 0x25, 0x27, 0x2f, 0x76, 0xa5, 0x10, 0x65, 0x15, 0xcc, 0x8b, 0x7a,
	0x50, 0x84, 0xeb, 0xa3, 0x30, 0x0a, 0xd4, 0x19, 0x56, 0x8a, 0x9b, 0x3c, 0x40, 0x61, 0x35, 0xba,
	0x4c, 0x6b, 0x3e, 0x40, 0x24, 0x99, 0x54, 0xbc, 0x59, 0x5e, 0x73, 0x11, 0x1e, 0xab, 0xde, 0x03,
	0x30, 0x3f, 0xe4, 0x11, 0xaf, 0x83, 0x98, 0x03, 0x54, 0x50, 0x9e, 0x5a, 0xc9, 0x6f, 0xdc, 0x7e,
	0x95, 0x23, 0xf6, 0x39, 0xa1, 0x21, 0xf0, 0x66, 0x8e, 0x9e, 0xdd, 0x91, 0x07, 0xa3, 0xcb, 0x44,
	0xa9, 0x02, 0x5e, 0x53, 0x97, 0x1a, 0x55, 0xcd, 0xb3, 0x12, 0x6a, 0x3a, 0x77, 0xb1, 0x3e, 0x74,
	0xb1, 0xde, 0x1c, 0xba, 0xd8, 0x9c, 0xa1, 0x3a, 0x4f, 0xce, 0x4a, 0x92, 0x33, 0xcb, 0x78, 0x34,
	0xa2, 0x7c, 0x09, 0x66, 0x50, 0xe8, 0x73, 0x89, 0x02, 0xcb, 0xeb, 0xff, 0x49, 0x5c, 0x47, 0xa1,
	0xcf, 0x04, 0xbe, 0x00, 0xd3, 0x24, 0x81, 0x49, 0x9f, 0xa8, 0x73, 0xcc, 0xe8, 0x1f, 0xbd, 0xc6,
	0xe8, 0x0d, 0x06, 0x76, 0x04, 0xe9, 0xae, 0xfc, 0xf8, 0x87, 0x52, 0xe6, 0xf7, 0x67, 0x6b, 0x33,
	0x22, 0x6c, 0x2f, 0xff, 0x2b, 0x81, 0xf9, 0x2d, 0x7c, 0x80, 0x7c, 0xe6, 0x95, 0xe1, 0xb0, 0xed,
	0x80, 0x02, 0x75, 0x85, 0x2b, 0xe6, 0x80, 0x8d, 0x5b, 0xfe, 0xd5, 0x53, 0x95, 0x9a, 0x53, 0x33,
	0x77, 0x72, 0x5a, 0x92, 0x9c, 0x7c, 0x2b, 0x35, 0xba, 0xdf, 0x4a, 0x60, 0x31, 0x46, 0x01, 0xc4,
	0x21, 0xeb, 0x4c, 0xda, 0x8a, 0xd9, 0xd7, 0x59, 0xd1, 0x78, 0x43, 0x2b, 0x3a, 0x0b, 0x2f, 0x77,
	0x6a, 0x5c, 0xba, 0xef, 0x6e, 0x8e, 0x1e, 0x7c, 0xf9, 0xc7, 0x29, 0x50, 0x30, 0x61, 0xe2, 0x75,
	0xde, 0xce, 0x39, 0xf7, 0xc0, 0x5c, 0x80, 0x43, 0xb7, 0x85, 0x7d, 0x31, 0xbe, 0xd9, 0xab, 0x8e,
	0x6f, 0x3e, 0xc0, 0xa1, 0x89, 0x79, 0x4f, 0x94, 0x7d, 0x30, 0x17, 0xd0, 0xa4, 0xd1, 0x50, 0x76,
	0xea, 0xaa, 0xb2, 0x05, 0xa1, 0xc3, 0x75, 0x3f, 0x06, 0x4a, 0x00, 0x0f, 0x5c, 0x74, 0x90, 0xa0,
	0xd0, 0x47, 0xbe, 0x1b, 0x47, 0xfd, 0xd0, 0x67, 0x97, 0xda, 0x9c, 0x23, 0x07, 0xf0, 0xc0, 0x12,
	0x01, 0x87, 0xae, 0x2b, 0x10, 0xbc, 0x33, 0x8a, 0x74, 0x63, 0x98, 0x20, 0x7e, 0x99, 0x5d, 0x25,
	0x97, 0x79, 0x94, 0x96, 0x77, 0x60, 0x82, 0x44, 0x93, 0x7e, 0x96, 0xc0, 0xcd, 0xb1, 0xa1, 0x54,
	0xb6, 0x41, 0x21, 0x46, 0x5d, 0x44, 0x5b, 0xc5, 0x66, 0x47, 0x7a, 0x83, 0xf1, 0xcb, 0x0b, 0x26,
	0x9b, 0x1f, 0x1b, 0x4c, 0x7f, 0x83, 0x70, 0xbb, 0x93, 0x5c, 0xbd, 0x37, 0x42, 0x60, 0xf5, 0x37,
	0x09, 0xe4, 0x53, 0xaf, 0x13, 0xe5, 0x13, 0xa0, 0x56, 0xf6, 0xaa, 0x4d, 0xfb, 0xab, 0xba, 0xdb,
	0xbc, 0xbf, 0x6b, 0xb9, 0x7b, 0xf5, 0xc6, 0xae, 0x55, 0xb5, 0xb7, 0x6c, 0xab, 0x26, 0x67, 0x34,
	0xe5, 0xe8, 0xb8, 0x7c, 0x23, 0x05, 0xaf, 0xe3, 0xae, 0x72, 0x67, 0x8c, 0xb1, 0x65, 0x7f, 0x6d,
	0xd5, 0xdc, 0x5d, 0xc7, 0xae, 0x5a, 0xb2, 0xa4, 0x2d, 0x1d, 0x1d, 0x97, 0x6f, 0xa5, 0x18, 0x97,
	0x53, 0x4a, 0x3b, 0x37, 0x42, 0x34, 0x2b, 0xcd, 0xea, 0x3d, 0x39, 0xab, 0x2d, 0x1c, 0x1d, 0x97,
	0xe5, 0x14, 0x85, 0x79, 0x5d, 0xcb, 0x3d, 0xfe, 0xa9, 0x98, 0x59, 0x3d, 0xcb, 0x82, 0xb9, 0x91,
	0x4b, 0x41, 0xd9, 0x04, 0xda, 0x50, 0xa5, 0xd1, 0xac, 0x34, 0xf7, 0x1a, 0x63, 0x29, 0xa7, 0xd5,
	0x38, 0x85, 0x26, 0xbd, 0x09, 0x16, 0xc7, 0x58, 0x8d, 0x66, 0xa5, 0x5e, 0x33, 0xef, 0xcb, 0x92,
	0xa6, 0x1e, 0x1d, 0x97, 0x17, 0x46, 0x18, 0x8d, 0x04, 0x86, 0xbe, 0x79, 0x38, 0x99, 0xe5, 0x34,
	0xad, 0x9a, 0x9c, 0x9d, 0xcc, 0x8a, 0x13, 0xe4, 0x4f, 0x60, 0xed, 0x5b, 0x8d, 0xa6, 0x5d, 0xdf,
	0x96, 0xa7, 0x26, 0xb0, 0x84, 0x69, 0xe8, 0xdb, 0x63, 0x8c, 0xb5, 0x65, 0xd7, 0xed, 0xc6, 0x3d,
	0xab, 0x26, 0xe7, 0x46, 0xaa, 0xca, 0x69, 0x5b, 0x38, 0xc4, 0xa4, 0x83, 0x7c, 0xe5, 0xf3, 0xcb,
	0x76, 0x08, 0x5e, 0xb5, 0x52, 0xaf, 0x5a, 0x3b, 0x3b, 0x56, 0x4d, 0xbe, 0xa6, 0x69, 0x47, 0xc7,
	0xe5, 0xc5, 0x11, 0x62, 0x15, 0x86, 0x1e, 0xea, 0x76, 0x91, 0xcf, 0x2b, 0x6c, 0x6e, 0x3f, 0x3f,
	0x2f, 0x4a, 0x27, 0xe7, 0x45, 0xe9, 0xef, 0xf3, 0xa2, 0xf4, 0xe4, 0xa2, 0x98, 0x39, 0xb9, 0x28,
	0x66, 0xfe, 0xbc, 0x28, 0x66, 0x1e, 0xac, 0xa5, 0x2e, 0x2f, 0xdc, 0x0e, 0x71, 0x82, 0x8c, 0xe1,
	0x07, 0xda, 0xc1, 0xc8, 0x27, 0x1a, 0xbb, 0xc7, 0x5a, 0xd3, 0xcc, 0xcf, 0x9f, 0xfe, 0x17, 0x00,
	0x00, 0xff, 0xff, 0x0b, 0x67, 0x4b, 0x2d, 0xc6, 0x09, 0x00, 0x00,
}

func (m *BaseAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x68
	}
	if len(m.EndTime) > 0 {
		for iNdEx := len(m.EndTime) - 1; iNdEx >= 0; iNdEx-- {
			n, err := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime[iNdEx], dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime[iNdEx]):])
			if err != nil {
				return 0, err
			}
			i -= n
			i = encodeVarintAuction(dAtA, i, uint64(n))
			i--
			dAtA[i] = 0x62
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintAuction(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	if len(m.VestingSchedules) > 0 {
		for iNdEx := len(m.VestingSchedules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingSchedules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.VestingReserveAddress) > 0 {
		i -= len(m.VestingReserveAddress)
		copy(dAtA[i:], m.VestingReserveAddress)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.VestingReserveAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PayingCoinDenom) > 0 {
		i -= len(m.PayingCoinDenom)
		copy(dAtA[i:], m.PayingCoinDenom)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.PayingCoinDenom)))
		i--
		dAtA[i] = 0x42
	}
	{
		size, err := m.SellingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.StartPrice.Size()
		i -= size
		if _, err := m.StartPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.PayingReserveAddress) > 0 {
		i -= len(m.PayingReserveAddress)
		copy(dAtA[i:], m.PayingReserveAddress)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.PayingReserveAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SellingReserveAddress) > 0 {
		i -= len(m.SellingReserveAddress)
		copy(dAtA[i:], m.SellingReserveAddress)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.SellingReserveAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Auctioneer) > 0 {
		i -= len(m.Auctioneer)
		copy(dAtA[i:], m.Auctioneer)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Auctioneer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FixedPriceAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedPriceAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedPriceAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RemainingSellingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.BaseAuction != nil {
		{
			size, err := m.BaseAuction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExtendedRoundRate.Size()
		i -= size
		if _, err := m.ExtendedRoundRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaxExtendedRound != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.MaxExtendedRound))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MatchedPrice.Size()
		i -= size
		if _, err := m.MatchedPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MinBidPrice.Size()
		i -= size
		if _, err := m.MinBidPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.BaseAuction != nil {
		{
			size, err := m.BaseAuction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VestingSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ReleaseTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ReleaseTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintAuction(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	if m.Type != 0 {
		n += 1 + sovAuction(uint64(m.Type))
	}
	l = len(m.Auctioneer)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = len(m.SellingReserveAddress)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = len(m.PayingReserveAddress)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.StartPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.SellingCoin.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = len(m.PayingCoinDenom)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = len(m.VestingReserveAddress)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	if len(m.VestingSchedules) > 0 {
		for _, e := range m.VestingSchedules {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovAuction(uint64(l))
	if len(m.EndTime) > 0 {
		for _, e := range m.EndTime {
			l = github_com_cosmos_gogoproto_types.SizeOfStdTime(e)
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovAuction(uint64(m.Status))
	}
	return n
}

func (m *FixedPriceAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAuction != nil {
		l = m.BaseAuction.Size()
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.RemainingSellingCoin.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *BatchAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAuction != nil {
		l = m.BaseAuction.Size()
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.MinBidPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.MatchedPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.MaxExtendedRound != 0 {
		n += 1 + sovAuction(uint64(m.MaxExtendedRound))
	}
	l = m.ExtendedRoundRate.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *VestingSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ReleaseTime)
	n += 1 + l + sovAuction(uint64(l))
	l = m.Weight.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AuctionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctioneer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctioneer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellingReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayingReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayingCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingSchedules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingSchedules = append(m.VestingSchedules, VestingSchedule{})
			if err := m.VestingSchedules[len(m.VestingSchedules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = append(m.EndTime, time.Time{})
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&(m.EndTime[len(m.EndTime)-1]), dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuctionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedPriceAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedPriceAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedPriceAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAuction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseAuction == nil {
				m.BaseAuction = &BaseAuction{}
			}
			if err := m.BaseAuction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingSellingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingSellingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAuction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseAuction == nil {
				m.BaseAuction = &BaseAuction{}
			}
			if err := m.BaseAuction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBidPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBidPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MatchedPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxExtendedRound", wireType)
			}
			m.MaxExtendedRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxExtendedRound |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedRoundRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExtendedRoundRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ReleaseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
