// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: modules/fundraising/v1/bid.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BidType enumerates the valid types of a bid.
type BidType int32

const (
	// BID_TYPE_UNSPECIFIED defines the default bid type
	BidTypeNil BidType = 0
	// BID_TYPE_FIXED_PRICE defines a bid type for a fixed price auction type
	BidTypeFixedPrice BidType = 1
	// BID_TYPE_BATCH_WORTH defines a bid type for How-Much-Worth-to-Buy of a
	// batch auction
	BidTypeBatchWorth BidType = 2
	// BID_TYPE_BATCH_MANY defines a bid type for How-Many-Coins-to-Buy of a batch
	// auction
	BidTypeBatchMany BidType = 3
)

var BidType_name = map[int32]string{
	0: "BID_TYPE_UNSPECIFIED",
	1: "BID_TYPE_FIXED_PRICE",
	2: "BID_TYPE_BATCH_WORTH",
	3: "BID_TYPE_BATCH_MANY",
}

var BidType_value = map[string]int32{
	"BID_TYPE_UNSPECIFIED": 0,
	"BID_TYPE_FIXED_PRICE": 1,
	"BID_TYPE_BATCH_WORTH": 2,
	"BID_TYPE_BATCH_MANY":  3,
}

func (x BidType) String() string {
	return proto.EnumName(BidType_name, int32(x))
}

func (BidType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3454ac2a3bdb8e89, []int{0}
}

// AddressType enumerates the available types of a address.
type AddressType int32

const (
	// ADDRESS_TYPE_32_BYTES the 32 bytes length address type of ADR 028.
	AddressType32Bytes AddressType = 0
	// ADDRESS_TYPE_20_BYTES the default 20 bytes length address type.
	AddressType20Bytes AddressType = 1
)

var AddressType_name = map[int32]string{
	0: "ADDRESS_TYPE_32_BYTES",
	1: "ADDRESS_TYPE_20_BYTES",
}

var AddressType_value = map[string]int32{
	"ADDRESS_TYPE_32_BYTES": 0,
	"ADDRESS_TYPE_20_BYTES": 1,
}

func (x AddressType) String() string {
	return proto.EnumName(AddressType_name, int32(x))
}

func (AddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3454ac2a3bdb8e89, []int{1}
}

// Bid defines a standard bid for an auction.
type Bid struct {
	// auctionID specifies the id of the auction
	AuctionID uint64 `protobuf:"varint,1,opt,name=auctionID,proto3" json:"auctionID,omitempty"`
	// bidder specifies the bech32-encoded address that bids for the auction
	Bidder string `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	// bidID specifies an index of a bid for the bidder
	BidID uint64 `protobuf:"varint,3,opt,name=bidID,proto3" json:"bidID,omitempty"`
	// type specifies the bid type; type 1 is fixed price, 2 is how-much-worth, 3
	// is how-many-coins
	Type BidType `protobuf:"varint,4,opt,name=type,proto3,enum=modules.fundraising.v1.BidType" json:"type,omitempty"`
	// price specifies the bid price in which price the bidder places the bid
	Price cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	// coin specifies the amount of coin that the bidder bids
	// for a fixed price auction, the denom is of the paying coin.
	// for a batch auction of how-much-worth, the denom is of the paying coin.
	// for a batch auction of how-many-coins, the denom is of the selling coin.
	Coin types.Coin `protobuf:"bytes,6,opt,name=coin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin"`
	// isMatched specifies the bid that is a winning bid and enables the bidder
	// to purchase the selling coin
	IsMatched bool `protobuf:"varint,7,opt,name=isMatched,proto3" json:"isMatched,omitempty"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_3454ac2a3bdb8e89, []int{0}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("modules.fundraising.v1.BidType", BidType_name, BidType_value)
	proto.RegisterEnum("modules.fundraising.v1.AddressType", AddressType_name, AddressType_value)
	proto.RegisterType((*Bid)(nil), "modules.fundraising.v1.Bid")
}

func init() { proto.RegisterFile("modules/fundraising/v1/bid.proto", fileDescriptor_3454ac2a3bdb8e89) }

var fileDescriptor_3454ac2a3bdb8e89 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x31, 0x4f, 0xdb, 0x40,
	0x18, 0xf5, 0x41, 0x80, 0x72, 0x54, 0x28, 0xb8, 0x01, 0x19, 0xb7, 0x72, 0xac, 0x2e, 0x8d, 0x22,
	0xc5, 0x26, 0xc9, 0xd6, 0x2d, 0x8e, 0x0d, 0x58, 0x2a, 0x34, 0x72, 0x52, 0x51, 0xba, 0x58, 0xb6,
	0xef, 0x9a, 0x9c, 0x20, 0xbe, 0x28, 0xe7, 0x20, 0xf2, 0x0f, 0x50, 0xa6, 0xce, 0x95, 0x22, 0x55,
	0xea, 0x52, 0x75, 0x62, 0xe8, 0x8f, 0x40, 0x9d, 0x50, 0xa7, 0xaa, 0x03, 0xad, 0xc8, 0x80, 0xfa,
	0x2f, 0x2a, 0xdb, 0x57, 0x61, 0x4a, 0x17, 0xdb, 0xdf, 0xf7, 0xbd, 0xe7, 0x77, 0xef, 0x9d, 0x3e,
	0xa8, 0xf6, 0x29, 0x1a, 0x1d, 0x63, 0xa6, 0xbf, 0x1d, 0x85, 0x68, 0xe8, 0x11, 0x46, 0xc2, 0xae,
	0x7e, 0x52, 0xd5, 0x7d, 0x82, 0xb4, 0xc1, 0x90, 0x46, 0x54, 0xdc, 0xe0, 0x08, 0x2d, 0x83, 0xd0,
	0x4e, 0xaa, 0xf2, 0x9a, 0xd7, 0x27, 0x21, 0xd5, 0x93, 0x67, 0x0a, 0x95, 0x95, 0x80, 0xb2, 0x3e,
	0x65, 0xba, 0xef, 0x31, 0xac, 0x9f, 0x54, 0x7d, 0x1c, 0x79, 0x55, 0x3d, 0xa0, 0x24, 0xe4, 0xf3,
	0xcd, 0x74, 0xee, 0x26, 0x95, 0x9e, 0x16, 0x7c, 0x54, 0xe8, 0xd2, 0x2e, 0x4d, 0xfb, 0xf1, 0x57,
	0xda, 0x7d, 0xfa, 0x7b, 0x0e, 0xce, 0x1b, 0x04, 0x89, 0x4f, 0xe0, 0xb2, 0x37, 0x0a, 0x22, 0x42,
	0x43, 0xdb, 0x94, 0x80, 0x0a, 0x4a, 0x39, 0xe7, 0xb6, 0x21, 0x6e, 0xc0, 0x45, 0x9f, 0x20, 0x84,
	0x87, 0xd2, 0x9c, 0x0a, 0x4a, 0xcb, 0x0e, 0xaf, 0xc4, 0x02, 0x5c, 0xf0, 0x09, 0xb2, 0x4d, 0x69,
	0x3e, 0x61, 0xa4, 0x85, 0x58, 0x87, 0xb9, 0x68, 0x3c, 0xc0, 0x52, 0x4e, 0x05, 0xa5, 0xd5, 0x5a,
	0x51, 0xfb, 0xbf, 0x3d, 0xcd, 0x20, 0xa8, 0x33, 0x1e, 0x60, 0x27, 0x01, 0x8b, 0x3b, 0x70, 0x61,
	0x30, 0x24, 0x01, 0x96, 0x16, 0x62, 0x05, 0xa3, 0x7a, 0x71, 0x55, 0x14, 0x7e, 0x5c, 0x15, 0x1f,
	0xa7, 0x1e, 0x18, 0x3a, 0xd2, 0x08, 0xd5, 0xfb, 0x5e, 0xd4, 0xd3, 0x5e, 0xe0, 0xae, 0x17, 0x8c,
	0x4d, 0x1c, 0x7c, 0xfb, 0x52, 0x81, 0xdc, 0xa2, 0x89, 0x03, 0x27, 0xe5, 0x8b, 0x11, 0xcc, 0xc5,
	0x81, 0x48, 0x8b, 0x2a, 0x28, 0xad, 0xd4, 0x36, 0x35, 0x8e, 0x88, 0x13, 0xd3, 0x78, 0x62, 0x5a,
	0x93, 0x92, 0xd0, 0xb0, 0x62, 0x89, 0xcf, 0x3f, 0x8b, 0xcf, 0xba, 0x24, 0xea, 0x8d, 0x7c, 0x2d,
	0xa0, 0x7d, 0x9e, 0x18, 0x7f, 0x55, 0x18, 0x3a, 0xd2, 0xe3, 0xc3, 0xb1, 0x84, 0xf0, 0xfe, 0xe6,
	0xbc, 0xfc, 0xf0, 0x38, 0x11, 0x77, 0x63, 0x05, 0xf6, 0xe9, 0xe6, 0xbc, 0x0c, 0x9c, 0x44, 0x2d,
	0xce, 0x8f, 0xb0, 0x3d, 0x2f, 0x0a, 0x7a, 0x18, 0x49, 0x4b, 0x2a, 0x28, 0x3d, 0x70, 0x6e, 0x1b,
	0xcf, 0x73, 0x67, 0x1f, 0x8a, 0x42, 0xf9, 0x2b, 0x80, 0x4b, 0xdc, 0xb4, 0x58, 0x82, 0x05, 0xc3,
	0x36, 0xdd, 0xce, 0x61, 0xcb, 0x72, 0x5f, 0xed, 0xb7, 0x5b, 0x56, 0xd3, 0xde, 0xb6, 0x2d, 0x33,
	0x2f, 0xc8, 0xab, 0x93, 0xa9, 0x0a, 0x39, 0x6c, 0x9f, 0x1c, 0x8b, 0x7a, 0x06, 0xb9, 0x6d, 0xbf,
	0xb6, 0x4c, 0xb7, 0xe5, 0xd8, 0x4d, 0x2b, 0x0f, 0xe4, 0xf5, 0xc9, 0x54, 0x5d, 0xe3, 0xc8, 0x6d,
	0x72, 0x8a, 0x51, 0x2b, 0x09, 0x20, 0x4b, 0x30, 0x1a, 0x9d, 0xe6, 0xae, 0x7b, 0xf0, 0xd2, 0xe9,
	0xec, 0xe6, 0xe7, 0xee, 0x10, 0x8c, 0xf8, 0x68, 0x07, 0x74, 0x18, 0xf5, 0xc4, 0x0a, 0x7c, 0xf4,
	0x0f, 0x61, 0xaf, 0xb1, 0x7f, 0x98, 0x9f, 0x97, 0x0b, 0x93, 0xa9, 0x9a, 0xcf, 0xe2, 0xf7, 0xbc,
	0x70, 0x2c, 0xe7, 0xce, 0x3e, 0x2a, 0x42, 0x79, 0x0c, 0x57, 0x1a, 0x08, 0x0d, 0x31, 0x63, 0x89,
	0x9f, 0x2a, 0x5c, 0x6f, 0x98, 0xa6, 0x63, 0xb5, 0xdb, 0xe9, 0x7f, 0xea, 0x35, 0xd7, 0x38, 0xec,
	0x58, 0xed, 0xbc, 0x20, 0x6f, 0x4c, 0xa6, 0xaa, 0x98, 0xc1, 0xd6, 0x6b, 0xc6, 0x38, 0xc2, 0xec,
	0x1e, 0xa5, 0xb6, 0xc5, 0x29, 0xe0, 0x1e, 0xa5, 0xb6, 0x95, 0x50, 0x52, 0x69, 0x63, 0xe7, 0xe2,
	0x5a, 0x01, 0x97, 0xd7, 0x0a, 0xf8, 0x75, 0xad, 0x80, 0x77, 0x33, 0x45, 0xb8, 0x9c, 0x29, 0xc2,
	0xf7, 0x99, 0x22, 0xbc, 0xa9, 0x64, 0xae, 0x92, 0x74, 0x43, 0x12, 0x61, 0xfd, 0xef, 0xf6, 0x9d,
	0xde, 0xd9, 0xbf, 0xe4, 0x56, 0xfd, 0xc5, 0x64, 0x07, 0xea, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x69, 0x1e, 0x33, 0xdb, 0xa3, 0x03, 0x00, 0x00,
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsMatched {
		i--
		if m.IsMatched {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Type != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.BidID != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.BidID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintBid(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionID != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.AuctionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBid(dAtA []byte, offset int, v uint64) int {
	offset -= sovBid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionID != 0 {
		n += 1 + sovBid(uint64(m.AuctionID))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovBid(uint64(l))
	}
	if m.BidID != 0 {
		n += 1 + sovBid(uint64(m.BidID))
	}
	if m.Type != 0 {
		n += 1 + sovBid(uint64(m.Type))
	}
	l = m.Price.Size()
	n += 1 + l + sovBid(uint64(l))
	l = m.Coin.Size()
	n += 1 + l + sovBid(uint64(l))
	if m.IsMatched {
		n += 2
	}
	return n
}

func sovBid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBid(x uint64) (n int) {
	return sovBid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionID", wireType)
			}
			m.AuctionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidID", wireType)
			}
			m.BidID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BidType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMatched", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMatched = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBid = fmt.Errorf("proto: unexpected end of group")
)
