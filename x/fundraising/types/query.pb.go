// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: modules/fundraising/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryAllAuctionRequest is request type for the Query/Auctions RPC method.
type QueryAllAuctionRequest struct {
	Status     string             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Type       string             `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAuctionRequest) Reset()         { *m = QueryAllAuctionRequest{} }
func (m *QueryAllAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuctionRequest) ProtoMessage()    {}
func (*QueryAllAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{2}
}
func (m *QueryAllAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuctionRequest.Merge(m, src)
}
func (m *QueryAllAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuctionRequest proto.InternalMessageInfo

func (m *QueryAllAuctionRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryAllAuctionRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *QueryAllAuctionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllAuctionResponse is response type for the Query/Auctions RPC method.
type QueryAllAuctionResponse struct {
	// auctions specifies the existing auctions
	Auction []*types.Any `protobuf:"bytes,1,rep,name=auction,proto3" json:"auction,omitempty"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAuctionResponse) Reset()         { *m = QueryAllAuctionResponse{} }
func (m *QueryAllAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuctionResponse) ProtoMessage()    {}
func (*QueryAllAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{3}
}
func (m *QueryAllAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuctionResponse.Merge(m, src)
}
func (m *QueryAllAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuctionResponse proto.InternalMessageInfo

func (m *QueryAllAuctionResponse) GetAuction() []*types.Any {
	if m != nil {
		return m.Auction
	}
	return nil
}

func (m *QueryAllAuctionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAuctionRequest is the request type for the Query/Auction RPC method.
type QueryGetAuctionRequest struct {
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (m *QueryGetAuctionRequest) Reset()         { *m = QueryGetAuctionRequest{} }
func (m *QueryGetAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuctionRequest) ProtoMessage()    {}
func (*QueryGetAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{4}
}
func (m *QueryGetAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuctionRequest.Merge(m, src)
}
func (m *QueryGetAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuctionRequest proto.InternalMessageInfo

func (m *QueryGetAuctionRequest) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

// QueryGetAuctionResponse is the response type for the Query/Auction RPC method.
type QueryGetAuctionResponse struct {
	Auction *types.Any `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
}

func (m *QueryGetAuctionResponse) Reset()         { *m = QueryGetAuctionResponse{} }
func (m *QueryGetAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuctionResponse) ProtoMessage()    {}
func (*QueryGetAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{5}
}
func (m *QueryGetAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuctionResponse.Merge(m, src)
}
func (m *QueryGetAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuctionResponse proto.InternalMessageInfo

func (m *QueryGetAuctionResponse) GetAuction() *types.Any {
	if m != nil {
		return m.Auction
	}
	return nil
}

// QueryAllowedBidderRequest is the request type for the Query/AllowedBidder RPC method.
type QueryAllAllowedBidderRequest struct {
	AuctionId  uint64             `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAllowedBidderRequest) Reset()         { *m = QueryAllAllowedBidderRequest{} }
func (m *QueryAllAllowedBidderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllowedBidderRequest) ProtoMessage()    {}
func (*QueryAllAllowedBidderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{6}
}
func (m *QueryAllAllowedBidderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllowedBidderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllowedBidderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllowedBidderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllowedBidderRequest.Merge(m, src)
}
func (m *QueryAllAllowedBidderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllowedBidderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllowedBidderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllowedBidderRequest proto.InternalMessageInfo

func (m *QueryAllAllowedBidderRequest) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *QueryAllAllowedBidderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllowedBidderResponse is the response type for the Query/AllowedBidder RPC method.
type QueryAllAllowedBidderResponse struct {
	AllowedBidder []AllowedBidder `protobuf:"bytes,1,rep,name=allowed_bidder,json=allowedBidder,proto3" json:"allowed_bidder"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAllowedBidderResponse) Reset()         { *m = QueryAllAllowedBidderResponse{} }
func (m *QueryAllAllowedBidderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllowedBidderResponse) ProtoMessage()    {}
func (*QueryAllAllowedBidderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{7}
}
func (m *QueryAllAllowedBidderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllowedBidderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllowedBidderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllowedBidderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllowedBidderResponse.Merge(m, src)
}
func (m *QueryAllAllowedBidderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllowedBidderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllowedBidderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllowedBidderResponse proto.InternalMessageInfo

func (m *QueryAllAllowedBidderResponse) GetAllowedBidder() []AllowedBidder {
	if m != nil {
		return m.AllowedBidder
	}
	return nil
}

func (m *QueryAllAllowedBidderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllowedBidderRequest is the request type for the Query/AllowedBidder RPC
// method.
type QueryGetAllowedBidderRequest struct {
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Bidder    string `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
}

func (m *QueryGetAllowedBidderRequest) Reset()         { *m = QueryGetAllowedBidderRequest{} }
func (m *QueryGetAllowedBidderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllowedBidderRequest) ProtoMessage()    {}
func (*QueryGetAllowedBidderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{8}
}
func (m *QueryGetAllowedBidderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllowedBidderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllowedBidderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllowedBidderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllowedBidderRequest.Merge(m, src)
}
func (m *QueryGetAllowedBidderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllowedBidderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllowedBidderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllowedBidderRequest proto.InternalMessageInfo

func (m *QueryGetAllowedBidderRequest) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *QueryGetAllowedBidderRequest) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

// QueryAllowedBidderResponse is the response type for the Query/AllowedBidder
// RPC method.
type QueryGetAllowedBidderResponse struct {
	AllowedBidder AllowedBidder `protobuf:"bytes,1,opt,name=allowed_bidder,json=allowedBidder,proto3" json:"allowed_bidder"`
}

func (m *QueryGetAllowedBidderResponse) Reset()         { *m = QueryGetAllowedBidderResponse{} }
func (m *QueryGetAllowedBidderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllowedBidderResponse) ProtoMessage()    {}
func (*QueryGetAllowedBidderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{9}
}
func (m *QueryGetAllowedBidderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllowedBidderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllowedBidderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllowedBidderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllowedBidderResponse.Merge(m, src)
}
func (m *QueryGetAllowedBidderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllowedBidderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllowedBidderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllowedBidderResponse proto.InternalMessageInfo

func (m *QueryGetAllowedBidderResponse) GetAllowedBidder() AllowedBidder {
	if m != nil {
		return m.AllowedBidder
	}
	return AllowedBidder{}
}

// QueryGetBidRequest is the request type for the Query/Sequence RPC method.
type QueryGetBidRequest struct {
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	BidId     uint64 `protobuf:"varint,2,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
}

func (m *QueryGetBidRequest) Reset()         { *m = QueryGetBidRequest{} }
func (m *QueryGetBidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBidRequest) ProtoMessage()    {}
func (*QueryGetBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{10}
}
func (m *QueryGetBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBidRequest.Merge(m, src)
}
func (m *QueryGetBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBidRequest proto.InternalMessageInfo

func (m *QueryGetBidRequest) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *QueryGetBidRequest) GetBidId() uint64 {
	if m != nil {
		return m.BidId
	}
	return 0
}

// QueryGetBidResponse is response type for the Query/Sequence RPC method.
type QueryGetBidResponse struct {
	// bid specifies specific bid
	Bid Bid `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid"`
}

func (m *QueryGetBidResponse) Reset()         { *m = QueryGetBidResponse{} }
func (m *QueryGetBidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBidResponse) ProtoMessage()    {}
func (*QueryGetBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{11}
}
func (m *QueryGetBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBidResponse.Merge(m, src)
}
func (m *QueryGetBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBidResponse proto.InternalMessageInfo

func (m *QueryGetBidResponse) GetBid() Bid {
	if m != nil {
		return m.Bid
	}
	return Bid{}
}

// QueryBidsRequest is request type for the Query/Bids RPC method.
type QueryAllBidRequest struct {
	AuctionId  uint64             `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Bidder     string             `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	IsMatched  string             `protobuf:"bytes,3,opt,name=is_matched,json=isMatched,proto3" json:"is_matched,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBidRequest) Reset()         { *m = QueryAllBidRequest{} }
func (m *QueryAllBidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBidRequest) ProtoMessage()    {}
func (*QueryAllBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{12}
}
func (m *QueryAllBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBidRequest.Merge(m, src)
}
func (m *QueryAllBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBidRequest proto.InternalMessageInfo

func (m *QueryAllBidRequest) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *QueryAllBidRequest) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *QueryAllBidRequest) GetIsMatched() string {
	if m != nil {
		return m.IsMatched
	}
	return ""
}

func (m *QueryAllBidRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBidsResponse is response type for the Query/Bids RPC method.
type QueryAllBidResponse struct {
	// bids specifies the existing bids
	Bid []Bid `protobuf:"bytes,1,rep,name=bid,proto3" json:"bid"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBidResponse) Reset()         { *m = QueryAllBidResponse{} }
func (m *QueryAllBidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBidResponse) ProtoMessage()    {}
func (*QueryAllBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{13}
}
func (m *QueryAllBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBidResponse.Merge(m, src)
}
func (m *QueryAllBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBidResponse proto.InternalMessageInfo

func (m *QueryAllBidResponse) GetBid() []Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

func (m *QueryAllBidResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllVestingQueueRequest is request type for the Query/Vestings RPC method.
type QueryAllVestingQueueRequest struct {
	AuctionId  uint64             `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVestingQueueRequest) Reset()         { *m = QueryAllVestingQueueRequest{} }
func (m *QueryAllVestingQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVestingQueueRequest) ProtoMessage()    {}
func (*QueryAllVestingQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{14}
}
func (m *QueryAllVestingQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVestingQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVestingQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVestingQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVestingQueueRequest.Merge(m, src)
}
func (m *QueryAllVestingQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVestingQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVestingQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVestingQueueRequest proto.InternalMessageInfo

func (m *QueryAllVestingQueueRequest) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *QueryAllVestingQueueRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllVestingQueueResponse is response type for the Query/Vestings RPC method.
type QueryAllVestingQueueResponse struct {
	// vestings specifies the existing vestings
	VestingQueue []VestingQueue      `protobuf:"bytes,1,rep,name=vestingQueue,proto3" json:"vestingQueue"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVestingQueueResponse) Reset()         { *m = QueryAllVestingQueueResponse{} }
func (m *QueryAllVestingQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVestingQueueResponse) ProtoMessage()    {}
func (*QueryAllVestingQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9275eda8d24f0a10, []int{15}
}
func (m *QueryAllVestingQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVestingQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVestingQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVestingQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVestingQueueResponse.Merge(m, src)
}
func (m *QueryAllVestingQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVestingQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVestingQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVestingQueueResponse proto.InternalMessageInfo

func (m *QueryAllVestingQueueResponse) GetVestingQueue() []VestingQueue {
	if m != nil {
		return m.VestingQueue
	}
	return nil
}

func (m *QueryAllVestingQueueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "modules.fundraising.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "modules.fundraising.v1.QueryParamsResponse")
	proto.RegisterType((*QueryAllAuctionRequest)(nil), "modules.fundraising.v1.QueryAllAuctionRequest")
	proto.RegisterType((*QueryAllAuctionResponse)(nil), "modules.fundraising.v1.QueryAllAuctionResponse")
	proto.RegisterType((*QueryGetAuctionRequest)(nil), "modules.fundraising.v1.QueryGetAuctionRequest")
	proto.RegisterType((*QueryGetAuctionResponse)(nil), "modules.fundraising.v1.QueryGetAuctionResponse")
	proto.RegisterType((*QueryAllAllowedBidderRequest)(nil), "modules.fundraising.v1.QueryAllAllowedBidderRequest")
	proto.RegisterType((*QueryAllAllowedBidderResponse)(nil), "modules.fundraising.v1.QueryAllAllowedBidderResponse")
	proto.RegisterType((*QueryGetAllowedBidderRequest)(nil), "modules.fundraising.v1.QueryGetAllowedBidderRequest")
	proto.RegisterType((*QueryGetAllowedBidderResponse)(nil), "modules.fundraising.v1.QueryGetAllowedBidderResponse")
	proto.RegisterType((*QueryGetBidRequest)(nil), "modules.fundraising.v1.QueryGetBidRequest")
	proto.RegisterType((*QueryGetBidResponse)(nil), "modules.fundraising.v1.QueryGetBidResponse")
	proto.RegisterType((*QueryAllBidRequest)(nil), "modules.fundraising.v1.QueryAllBidRequest")
	proto.RegisterType((*QueryAllBidResponse)(nil), "modules.fundraising.v1.QueryAllBidResponse")
	proto.RegisterType((*QueryAllVestingQueueRequest)(nil), "modules.fundraising.v1.QueryAllVestingQueueRequest")
	proto.RegisterType((*QueryAllVestingQueueResponse)(nil), "modules.fundraising.v1.QueryAllVestingQueueResponse")
}

func init() {
	proto.RegisterFile("modules/fundraising/v1/query.proto", fileDescriptor_9275eda8d24f0a10)
}

var fileDescriptor_9275eda8d24f0a10 = []byte{
	// 1023 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x38, 0xa9, 0x8b, 0xc7, 0x05, 0xb5, 0x43, 0x08, 0xa9, 0xdb, 0x9a, 0x68, 0xdb, 0xd0,
	0x2a, 0x51, 0x76, 0x88, 0x13, 0x7e, 0x89, 0xa2, 0xca, 0x96, 0xc0, 0x24, 0x02, 0x94, 0xae, 0xc4,
	0x0f, 0x71, 0xb1, 0x66, 0xb3, 0xd3, 0xed, 0x48, 0xf6, 0xae, 0xe3, 0xd9, 0x35, 0x44, 0x55, 0x2f,
	0x08, 0x6e, 0x1c, 0x2a, 0xe5, 0xc8, 0xa5, 0x37, 0x7a, 0x44, 0x08, 0x89, 0x0b, 0x07, 0x8e, 0x85,
	0x53, 0x11, 0x17, 0x4e, 0x08, 0x25, 0x48, 0xfc, 0x1b, 0x68, 0x67, 0xde, 0x92, 0x5d, 0x3b, 0x9b,
	0xb5, 0x9d, 0xa8, 0x97, 0xd6, 0x3b, 0xfb, 0xde, 0x9b, 0xef, 0xfb, 0xde, 0x9b, 0xf9, 0x36, 0xd8,
	0xe8, 0xf8, 0x4e, 0xd8, 0xe6, 0x92, 0xde, 0x09, 0x3d, 0xa7, 0xc7, 0x84, 0x14, 0x9e, 0x4b, 0xfb,
	0xab, 0x74, 0x27, 0xe4, 0xbd, 0x5d, 0xb3, 0xdb, 0xf3, 0x03, 0x9f, 0xcc, 0x41, 0x8c, 0x99, 0x88,
	0x31, 0xfb, 0xab, 0x95, 0x0b, 0xac, 0x23, 0x3c, 0x9f, 0xaa, 0x7f, 0x75, 0x68, 0x65, 0x69, 0xdb,
	0x97, 0x1d, 0x5f, 0x52, 0x9b, 0x49, 0xae, 0x6b, 0xd0, 0xfe, 0xaa, 0xcd, 0x03, 0xb6, 0x4a, 0xbb,
	0xcc, 0x15, 0x1e, 0x0b, 0x84, 0xef, 0x41, 0xec, 0x45, 0x1d, 0xdb, 0x52, 0x4f, 0x54, 0x3f, 0xc0,
	0xab, 0x59, 0xd7, 0x77, 0x7d, 0xbd, 0x1e, 0xfd, 0x82, 0xd5, 0xcb, 0xae, 0xef, 0xbb, 0x6d, 0x4e,
	0x59, 0x57, 0x50, 0xe6, 0x79, 0x7e, 0xa0, 0xaa, 0xc5, 0x39, 0x17, 0xe1, 0xad, 0x7a, 0xb2, 0xc3,
	0x3b, 0x94, 0x79, 0x40, 0xa0, 0xb2, 0x9c, 0x41, 0x92, 0xb5, 0xdb, 0xfe, 0xe7, 0xdc, 0x69, 0xd9,
	0xc2, 0x71, 0x78, 0x0f, 0x82, 0xaf, 0x65, 0x05, 0x87, 0xdb, 0x09, 0xf0, 0x0b, 0x19, 0x51, 0xb6,
	0x70, 0x20, 0xe2, 0x6a, 0x46, 0x44, 0x97, 0xf5, 0x58, 0x27, 0x06, 0xbd, 0x94, 0x11, 0xd4, 0xe7,
	0x32, 0x10, 0x9e, 0xdb, 0xda, 0x09, 0x79, 0xc8, 0x75, 0xac, 0x31, 0x8b, 0xc9, 0xed, 0x48, 0xd1,
	0x2d, 0x55, 0xc0, 0xe2, 0x3b, 0x21, 0x97, 0x81, 0xf1, 0x29, 0x7e, 0x3e, 0xb5, 0x2a, 0xbb, 0xbe,
	0x27, 0x39, 0xa9, 0xe3, 0xa2, 0xde, 0x68, 0x1e, 0x2d, 0xa0, 0x1b, 0xe5, 0x5a, 0xd5, 0x3c, 0xba,
	0x89, 0xa6, 0xce, 0x6b, 0x94, 0x1e, 0xff, 0xf5, 0xd2, 0xd4, 0xa3, 0x7f, 0xbf, 0x5f, 0x42, 0x16,
	0x24, 0x1a, 0xdf, 0x20, 0x3c, 0xa7, 0x4a, 0xd7, 0xdb, 0xed, 0xba, 0x26, 0x0f, 0x9b, 0x92, 0x39,
	0x5c, 0x94, 0x01, 0x0b, 0x42, 0x5d, 0xbd, 0x64, 0xc1, 0x13, 0x21, 0x78, 0x26, 0xd8, 0xed, 0xf2,
	0xf9, 0x82, 0x5a, 0x55, 0xbf, 0xc9, 0xbb, 0x18, 0x1f, 0xb6, 0x7e, 0x7e, 0x5a, 0xa1, 0x79, 0xd9,
	0x84, 0x76, 0x47, 0x73, 0x62, 0xea, 0x59, 0x83, 0x39, 0x31, 0xb7, 0x98, 0xcb, 0x61, 0x1f, 0x2b,
	0x91, 0x69, 0x3c, 0x44, 0xf8, 0xc5, 0x21, 0x38, 0xc0, 0xf6, 0x26, 0x3e, 0x0b, 0xed, 0x99, 0x47,
	0x0b, 0xd3, 0x37, 0xca, 0xb5, 0x59, 0x53, 0x4f, 0x83, 0x19, 0x4f, 0x83, 0x59, 0xf7, 0x76, 0x1b,
	0xe7, 0x7e, 0xfb, 0x71, 0xe5, 0x19, 0xc8, 0xdd, 0xb0, 0xe2, 0x14, 0xd2, 0x4c, 0x21, 0x2c, 0x28,
	0x84, 0xd7, 0x73, 0x11, 0xea, 0xad, 0x53, 0x10, 0x5f, 0x07, 0xc1, 0x9a, 0x3c, 0x18, 0x10, 0xec,
	0x0a, 0xc6, 0xb0, 0x5b, 0x4b, 0x38, 0x4a, 0xb4, 0x19, 0xab, 0x04, 0x2b, 0x1b, 0x8e, 0xf1, 0x09,
	0x50, 0x4b, 0x26, 0x1e, 0x45, 0x0d, 0x8d, 0x49, 0xcd, 0xf8, 0x1a, 0xe1, 0xcb, 0xff, 0x8b, 0xa6,
	0xa7, 0xbd, 0xa1, 0x86, 0x7d, 0x34, 0x60, 0x03, 0xcd, 0x2b, 0x4c, 0xdc, 0xbc, 0x9f, 0x11, 0xbe,
	0x92, 0x81, 0x03, 0x78, 0x5a, 0xf8, 0xb9, 0xf4, 0x71, 0x84, 0x4e, 0x2e, 0x66, 0x0d, 0x6e, 0xaa,
	0x4c, 0x63, 0x26, 0x9a, 0x5f, 0xeb, 0x59, 0x96, 0x5c, 0x3c, 0xbd, 0xc6, 0x7e, 0x04, 0x2a, 0x46,
	0xfd, 0x99, 0x40, 0xc5, 0x39, 0x5c, 0x04, 0x4e, 0xfa, 0x60, 0xc0, 0x93, 0x21, 0x41, 0x94, 0xe1,
	0xb2, 0xc7, 0x88, 0x82, 0x4e, 0x26, 0x8a, 0xb1, 0x09, 0xd7, 0x48, 0x93, 0x07, 0x0d, 0xe1, 0x8c,
	0xc8, 0xe0, 0x05, 0xc5, 0x20, 0x7a, 0x55, 0x50, 0xaf, 0xce, 0xd8, 0xc2, 0xd9, 0x70, 0x8c, 0x4d,
	0xb8, 0x7c, 0xe2, 0x5a, 0x00, 0x7b, 0x0d, 0x4f, 0xdb, 0x50, 0xa5, 0x5c, 0xbb, 0x94, 0x85, 0xb5,
	0x21, 0x1c, 0x40, 0x18, 0x45, 0x1b, 0x3f, 0x20, 0x00, 0x56, 0x6f, 0xb7, 0x47, 0x07, 0x96, 0x21,
	0x6d, 0x94, 0x26, 0x64, 0xab, 0xc3, 0x82, 0xed, 0xbb, 0xdc, 0x51, 0xb7, 0x4e, 0xc9, 0x2a, 0x09,
	0xf9, 0x81, 0x5e, 0x18, 0x98, 0xeb, 0x99, 0x89, 0xe7, 0x7a, 0x0f, 0x81, 0x02, 0x31, 0xe8, 0x41,
	0x05, 0xa6, 0x47, 0x57, 0xe0, 0xf4, 0xc6, 0xf5, 0x2b, 0x84, 0x2f, 0xc5, 0xa8, 0x3e, 0xd6, 0x4e,
	0x72, 0x3b, 0x32, 0x92, 0xa7, 0x7c, 0xe8, 0x7f, 0x4a, 0x5c, 0x3e, 0x69, 0x18, 0xa0, 0xd2, 0x87,
	0xf8, 0x5c, 0x3f, 0xb1, 0x0e, 0x72, 0x5d, 0xcb, 0x92, 0x2b, 0x59, 0x03, 0x74, 0x4b, 0xe5, 0x9f,
	0x9a, 0x80, 0xb5, 0xbd, 0x32, 0x3e, 0xa3, 0x90, 0x93, 0x07, 0x08, 0x17, 0xb5, 0x45, 0x92, 0xa5,
	0x2c, 0x5c, 0xc3, 0xae, 0x5c, 0x59, 0x1e, 0x29, 0x56, 0xef, 0x6c, 0xac, 0x7c, 0xf9, 0xc7, 0x3f,
	0x7b, 0x85, 0xeb, 0x64, 0x91, 0x0a, 0xd7, 0x13, 0x01, 0xa7, 0xc7, 0x7e, 0x39, 0x90, 0x6f, 0x11,
	0x2e, 0xbf, 0x2f, 0x64, 0xec, 0x14, 0xc4, 0x3c, 0x76, 0xaf, 0x21, 0xf3, 0xae, 0xd0, 0x91, 0xe3,
	0x01, 0xdf, 0xb2, 0xc2, 0xb7, 0x48, 0xae, 0x1e, 0x87, 0x2f, 0x36, 0xd3, 0xef, 0x10, 0xc6, 0x87,
	0x36, 0x96, 0x03, 0x6e, 0xc8, 0x28, 0x73, 0xc0, 0x0d, 0xfb, 0xa3, 0xf1, 0x86, 0x02, 0x57, 0x23,
	0xaf, 0x8c, 0x00, 0x8e, 0xde, 0x3b, 0x1c, 0xfb, 0xfb, 0xe4, 0x57, 0x84, 0x2f, 0x28, 0x1d, 0x53,
	0x9e, 0xb1, 0x9e, 0xab, 0xce, 0x11, 0x06, 0x50, 0x79, 0x75, 0xcc, 0x2c, 0x00, 0xdf, 0x54, 0xe0,
	0xeb, 0xe4, 0xd6, 0xb8, 0xe0, 0x07, 0x3e, 0x5d, 0xc9, 0xef, 0x08, 0x9f, 0x1f, 0x74, 0x91, 0x1c,
	0x2a, 0x19, 0x5e, 0x96, 0x43, 0x25, 0xcb, 0xaa, 0x8c, 0x2d, 0x45, 0x65, 0x93, 0xbc, 0x77, 0x42,
	0x2a, 0xf4, 0x9e, 0xfe, 0xff, 0x3e, 0x79, 0x88, 0xf0, 0xd9, 0xa8, 0x3f, 0x0d, 0xe1, 0xe4, 0x9c,
	0xbd, 0x94, 0x63, 0xe4, 0x9c, 0xbd, 0xf4, 0x45, 0x6d, 0xdc, 0x54, 0xb0, 0x5f, 0x23, 0xeb, 0x63,
	0xc3, 0x8e, 0x6e, 0xec, 0x47, 0x08, 0x17, 0xb5, 0xf7, 0xe5, 0x20, 0x4c, 0x99, 0x6d, 0x0e, 0xc2,
	0xb4, 0x99, 0x1a, 0xef, 0x28, 0x84, 0xb7, 0xc8, 0xdb, 0x93, 0x20, 0x54, 0x6a, 0xaa, 0x69, 0xff,
	0x05, 0xe1, 0xf3, 0x91, 0x9a, 0xc9, 0x4b, 0x94, 0xac, 0xe5, 0x49, 0x75, 0x84, 0x7b, 0x54, 0xd6,
	0xc7, 0x4b, 0x02, 0x1a, 0x75, 0x45, 0xe3, 0x2d, 0xf2, 0xe6, 0xd8, 0x34, 0xe0, 0x8a, 0x97, 0x8d,
	0xe6, 0xe3, 0xfd, 0x2a, 0x7a, 0xb2, 0x5f, 0x45, 0x7f, 0xef, 0x57, 0xd1, 0x83, 0x83, 0xea, 0xd4,
	0x93, 0x83, 0xea, 0xd4, 0x9f, 0x07, 0xd5, 0xa9, 0xcf, 0x56, 0x5c, 0x11, 0xdc, 0x0d, 0x6d, 0x73,
	0xdb, 0xef, 0x0c, 0x96, 0xff, 0x22, 0xb5, 0x41, 0xf4, 0x17, 0x89, 0xb4, 0x8b, 0xea, 0xd3, 0x79,
	0xed, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x84, 0x11, 0x81, 0xfd, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Auction items.
	ListAuction(ctx context.Context, in *QueryAllAuctionRequest, opts ...grpc.CallOption) (*QueryAllAuctionResponse, error)
	GetAuction(ctx context.Context, in *QueryGetAuctionRequest, opts ...grpc.CallOption) (*QueryGetAuctionResponse, error)
	// Queries a list of AllowedBidder items.
	ListAllowedBidder(ctx context.Context, in *QueryAllAllowedBidderRequest, opts ...grpc.CallOption) (*QueryAllAllowedBidderResponse, error)
	GetAllowedBidder(ctx context.Context, in *QueryGetAllowedBidderRequest, opts ...grpc.CallOption) (*QueryGetAllowedBidderResponse, error)
	// Queries a list of Bid items.
	ListBid(ctx context.Context, in *QueryAllBidRequest, opts ...grpc.CallOption) (*QueryAllBidResponse, error)
	GetBid(ctx context.Context, in *QueryGetBidRequest, opts ...grpc.CallOption) (*QueryGetBidResponse, error)
	// Queries a list of VestingQueue items.
	ListVestingQueue(ctx context.Context, in *QueryAllVestingQueueRequest, opts ...grpc.CallOption) (*QueryAllVestingQueueResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/modules.fundraising.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAuction(ctx context.Context, in *QueryAllAuctionRequest, opts ...grpc.CallOption) (*QueryAllAuctionResponse, error) {
	out := new(QueryAllAuctionResponse)
	err := c.cc.Invoke(ctx, "/modules.fundraising.v1.Query/ListAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAuction(ctx context.Context, in *QueryGetAuctionRequest, opts ...grpc.CallOption) (*QueryGetAuctionResponse, error) {
	out := new(QueryGetAuctionResponse)
	err := c.cc.Invoke(ctx, "/modules.fundraising.v1.Query/GetAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAllowedBidder(ctx context.Context, in *QueryAllAllowedBidderRequest, opts ...grpc.CallOption) (*QueryAllAllowedBidderResponse, error) {
	out := new(QueryAllAllowedBidderResponse)
	err := c.cc.Invoke(ctx, "/modules.fundraising.v1.Query/ListAllowedBidder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllowedBidder(ctx context.Context, in *QueryGetAllowedBidderRequest, opts ...grpc.CallOption) (*QueryGetAllowedBidderResponse, error) {
	out := new(QueryGetAllowedBidderResponse)
	err := c.cc.Invoke(ctx, "/modules.fundraising.v1.Query/GetAllowedBidder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListBid(ctx context.Context, in *QueryAllBidRequest, opts ...grpc.CallOption) (*QueryAllBidResponse, error) {
	out := new(QueryAllBidResponse)
	err := c.cc.Invoke(ctx, "/modules.fundraising.v1.Query/ListBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBid(ctx context.Context, in *QueryGetBidRequest, opts ...grpc.CallOption) (*QueryGetBidResponse, error) {
	out := new(QueryGetBidResponse)
	err := c.cc.Invoke(ctx, "/modules.fundraising.v1.Query/GetBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListVestingQueue(ctx context.Context, in *QueryAllVestingQueueRequest, opts ...grpc.CallOption) (*QueryAllVestingQueueResponse, error) {
	out := new(QueryAllVestingQueueResponse)
	err := c.cc.Invoke(ctx, "/modules.fundraising.v1.Query/ListVestingQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Auction items.
	ListAuction(context.Context, *QueryAllAuctionRequest) (*QueryAllAuctionResponse, error)
	GetAuction(context.Context, *QueryGetAuctionRequest) (*QueryGetAuctionResponse, error)
	// Queries a list of AllowedBidder items.
	ListAllowedBidder(context.Context, *QueryAllAllowedBidderRequest) (*QueryAllAllowedBidderResponse, error)
	GetAllowedBidder(context.Context, *QueryGetAllowedBidderRequest) (*QueryGetAllowedBidderResponse, error)
	// Queries a list of Bid items.
	ListBid(context.Context, *QueryAllBidRequest) (*QueryAllBidResponse, error)
	GetBid(context.Context, *QueryGetBidRequest) (*QueryGetBidResponse, error)
	// Queries a list of VestingQueue items.
	ListVestingQueue(context.Context, *QueryAllVestingQueueRequest) (*QueryAllVestingQueueResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ListAuction(ctx context.Context, req *QueryAllAuctionRequest) (*QueryAllAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuction not implemented")
}
func (*UnimplementedQueryServer) GetAuction(ctx context.Context, req *QueryGetAuctionRequest) (*QueryGetAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuction not implemented")
}
func (*UnimplementedQueryServer) ListAllowedBidder(ctx context.Context, req *QueryAllAllowedBidderRequest) (*QueryAllAllowedBidderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllowedBidder not implemented")
}
func (*UnimplementedQueryServer) GetAllowedBidder(ctx context.Context, req *QueryGetAllowedBidderRequest) (*QueryGetAllowedBidderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowedBidder not implemented")
}
func (*UnimplementedQueryServer) ListBid(ctx context.Context, req *QueryAllBidRequest) (*QueryAllBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBid not implemented")
}
func (*UnimplementedQueryServer) GetBid(ctx context.Context, req *QueryGetBidRequest) (*QueryGetBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBid not implemented")
}
func (*UnimplementedQueryServer) ListVestingQueue(ctx context.Context, req *QueryAllVestingQueueRequest) (*QueryAllVestingQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVestingQueue not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.fundraising.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.fundraising.v1.Query/ListAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAuction(ctx, req.(*QueryAllAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.fundraising.v1.Query/GetAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAuction(ctx, req.(*QueryGetAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAllowedBidder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAllowedBidderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAllowedBidder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.fundraising.v1.Query/ListAllowedBidder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAllowedBidder(ctx, req.(*QueryAllAllowedBidderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllowedBidder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllowedBidderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllowedBidder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.fundraising.v1.Query/GetAllowedBidder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllowedBidder(ctx, req.(*QueryGetAllowedBidderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.fundraising.v1.Query/ListBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListBid(ctx, req.(*QueryAllBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.fundraising.v1.Query/GetBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBid(ctx, req.(*QueryGetBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListVestingQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVestingQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListVestingQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.fundraising.v1.Query/ListVestingQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListVestingQueue(ctx, req.(*QueryAllVestingQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "modules.fundraising.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ListAuction",
			Handler:    _Query_ListAuction_Handler,
		},
		{
			MethodName: "GetAuction",
			Handler:    _Query_GetAuction_Handler,
		},
		{
			MethodName: "ListAllowedBidder",
			Handler:    _Query_ListAllowedBidder_Handler,
		},
		{
			MethodName: "GetAllowedBidder",
			Handler:    _Query_GetAllowedBidder_Handler,
		},
		{
			MethodName: "ListBid",
			Handler:    _Query_ListBid_Handler,
		},
		{
			MethodName: "GetBid",
			Handler:    _Query_GetBid_Handler,
		},
		{
			MethodName: "ListVestingQueue",
			Handler:    _Query_ListVestingQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/fundraising/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Auction) > 0 {
		for iNdEx := len(m.Auction) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auction[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auction != nil {
		{
			size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAllowedBidderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllowedBidderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllowedBidderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAllowedBidderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllowedBidderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllowedBidderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AllowedBidder) > 0 {
		for iNdEx := len(m.AllowedBidder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedBidder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllowedBidderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllowedBidderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllowedBidderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllowedBidderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllowedBidderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllowedBidderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AllowedBidder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BidId))
		i--
		dAtA[i] = 0x10
	}
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.IsMatched) > 0 {
		i -= len(m.IsMatched)
		copy(dAtA[i:], m.IsMatched)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IsMatched)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bid) > 0 {
		for iNdEx := len(m.Bid) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bid[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVestingQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVestingQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVestingQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVestingQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVestingQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVestingQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VestingQueue) > 0 {
		for iNdEx := len(m.VestingQueue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingQueue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auction) > 0 {
		for _, e := range m.Auction {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	return n
}

func (m *QueryGetAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auction != nil {
		l = m.Auction.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAllowedBidderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAllowedBidderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedBidder) > 0 {
		for _, e := range m.AllowedBidder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllowedBidderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllowedBidderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AllowedBidder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	if m.BidId != 0 {
		n += 1 + sovQuery(uint64(m.BidId))
	}
	return n
}

func (m *QueryGetBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Bid.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.IsMatched)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bid) > 0 {
		for _, e := range m.Bid {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVestingQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVestingQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VestingQueue) > 0 {
		for _, e := range m.VestingQueue {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auction = append(m.Auction, &types.Any{})
			if err := m.Auction[len(m.Auction)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auction == nil {
				m.Auction = &types.Any{}
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllowedBidderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllowedBidderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllowedBidderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllowedBidderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllowedBidderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllowedBidderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedBidder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedBidder = append(m.AllowedBidder, AllowedBidder{})
			if err := m.AllowedBidder[len(m.AllowedBidder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllowedBidderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllowedBidderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllowedBidderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllowedBidderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllowedBidderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllowedBidderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedBidder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AllowedBidder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidId", wireType)
			}
			m.BidId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMatched", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsMatched = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bid = append(m.Bid, Bid{})
			if err := m.Bid[len(m.Bid)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVestingQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVestingQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVestingQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVestingQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVestingQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVestingQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingQueue = append(m.VestingQueue, VestingQueue{})
			if err := m.VestingQueue[len(m.VestingQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
