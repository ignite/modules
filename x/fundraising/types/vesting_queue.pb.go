// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: modules/fundraising/v1/vesting_queue.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VestingQueue defines the vesting queue.
type VestingQueue struct {
	// auction_id specifies the id of the auction
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// auctioneer specifies the bech32-encoded address that creates the auction
	Auctioneer string `protobuf:"bytes,2,opt,name=auctioneer,proto3" json:"auctioneer,omitempty"`
	// paying_coin specifies the paying amount of coin
	PayingCoin types.Coin `protobuf:"bytes,3,opt,name=paying_coin,json=payingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"paying_coin"`
	// release_time specifies the timestamp of the vesting schedule
	ReleaseTime time.Time `protobuf:"bytes,4,opt,name=release_time,json=releaseTime,proto3,stdtime" json:"release_time"`
	// released specifies the status of distribution
	Released bool `protobuf:"varint,5,opt,name=released,proto3" json:"released,omitempty"`
}

func (m *VestingQueue) Reset()         { *m = VestingQueue{} }
func (m *VestingQueue) String() string { return proto.CompactTextString(m) }
func (*VestingQueue) ProtoMessage()    {}
func (*VestingQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af7a5ea0fd7cdbc, []int{0}
}
func (m *VestingQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingQueue.Merge(m, src)
}
func (m *VestingQueue) XXX_Size() int {
	return m.Size()
}
func (m *VestingQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingQueue.DiscardUnknown(m)
}

var xxx_messageInfo_VestingQueue proto.InternalMessageInfo

func (m *VestingQueue) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *VestingQueue) GetAuctioneer() string {
	if m != nil {
		return m.Auctioneer
	}
	return ""
}

func (m *VestingQueue) GetPayingCoin() types.Coin {
	if m != nil {
		return m.PayingCoin
	}
	return types.Coin{}
}

func (m *VestingQueue) GetReleaseTime() time.Time {
	if m != nil {
		return m.ReleaseTime
	}
	return time.Time{}
}

func (m *VestingQueue) GetReleased() bool {
	if m != nil {
		return m.Released
	}
	return false
}

func init() {
	proto.RegisterType((*VestingQueue)(nil), "modules.fundraising.v1.VestingQueue")
}

func init() {
	proto.RegisterFile("modules/fundraising/v1/vesting_queue.proto", fileDescriptor_3af7a5ea0fd7cdbc)
}

var fileDescriptor_3af7a5ea0fd7cdbc = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xbd, 0x8e, 0x13, 0x31,
	0x18, 0x8c, 0x8f, 0x03, 0xe5, 0x9c, 0x34, 0xac, 0x10, 0xda, 0x8b, 0x84, 0x13, 0xd1, 0x10, 0x45,
	0x3a, 0x5b, 0x81, 0x37, 0x08, 0x42, 0x27, 0x4a, 0x56, 0x88, 0x82, 0x26, 0xf2, 0xee, 0x7e, 0x67,
	0x2c, 0x76, 0xed, 0x65, 0xed, 0x5d, 0x91, 0x92, 0x37, 0xb8, 0x9a, 0x27, 0x40, 0x54, 0x57, 0xf1,
	0x0c, 0x57, 0x5e, 0x49, 0xc5, 0xa1, 0xa4, 0xb8, 0xd7, 0x40, 0xfe, 0xc9, 0x29, 0x34, 0xbb, 0x9e,
	0x6f, 0xc6, 0xf2, 0xcc, 0xe8, 0xc3, 0x8b, 0x5a, 0x97, 0x5d, 0x05, 0x86, 0x5d, 0x74, 0xaa, 0x6c,
	0xb9, 0x34, 0x52, 0x09, 0xd6, 0x2f, 0x59, 0x0f, 0xc6, 0x4a, 0x25, 0xd6, 0x5f, 0x3a, 0xe8, 0x80,
	0x36, 0xad, 0xb6, 0x3a, 0x79, 0x1a, 0xb5, 0xf4, 0x40, 0x4b, 0xfb, 0xe5, 0xe4, 0x31, 0xaf, 0xa5,
	0xd2, 0xcc, 0x7f, 0x83, 0x74, 0x42, 0x0a, 0x6d, 0x6a, 0x6d, 0x58, 0xce, 0x0d, 0xb0, 0x7e, 0x99,
	0x83, 0xe5, 0x4b, 0x56, 0x68, 0xa9, 0x22, 0x7f, 0x1a, 0xf8, 0xb5, 0x47, 0x2c, 0x80, 0x48, 0x3d,
	0x11, 0x5a, 0xe8, 0x30, 0x77, 0xa7, 0x38, 0x9d, 0x0a, 0xad, 0x45, 0x05, 0xcc, 0xa3, 0xbc, 0xbb,
	0x60, 0x56, 0xd6, 0x60, 0x2c, 0xaf, 0x9b, 0x20, 0x78, 0xfe, 0xeb, 0x08, 0x8f, 0x3f, 0x04, 0xd3,
	0xef, 0x9c, 0xe7, 0xe4, 0x19, 0xc6, 0xbc, 0x2b, 0xac, 0xd4, 0x6a, 0x2d, 0xcb, 0x14, 0xcd, 0xd0,
	0xfc, 0x38, 0x3b, 0x89, 0x93, 0xb7, 0x65, 0x42, 0xee, 0x69, 0x80, 0x36, 0x3d, 0x9a, 0xa1, 0xf9,
	0x49, 0x76, 0x30, 0x49, 0xbe, 0x21, 0x3c, 0x6a, 0xf8, 0xc6, 0x75, 0xe0, 0x7c, 0xa7, 0x0f, 0x66,
	0x68, 0x3e, 0x7a, 0x79, 0x4a, 0xa3, 0x57, 0x17, 0x8c, 0xc6, 0x60, 0xf4, 0xb5, 0x96, 0x6a, 0xf5,
	0xe6, 0xfa, 0xcf, 0x74, 0xf0, 0xf3, 0x76, 0xfa, 0x42, 0x48, 0xfb, 0xa9, 0xcb, 0x69, 0xa1, 0xeb,
	0x18, 0x2c, 0xfe, 0xce, 0x4c, 0xf9, 0x99, 0xd9, 0x4d, 0x03, 0xc6, 0x5f, 0xf8, 0x7e, 0x77, 0xb5,
	0x18, 0x57, 0x20, 0x78, 0xb1, 0xf1, 0x2f, 0x98, 0x1f, 0x77, 0x57, 0x0b, 0x94, 0xe1, 0xf0, 0xa8,
	0x53, 0x24, 0xe7, 0x78, 0xdc, 0x42, 0x05, 0xdc, 0xc0, 0xda, 0xc5, 0x4d, 0x8f, 0xbd, 0x87, 0x09,
	0x0d, 0x5d, 0xd0, 0x7d, 0x17, 0xf4, 0xfd, 0xbe, 0x8b, 0xd5, 0xd0, 0x99, 0xb8, 0xbc, 0x9d, 0xa2,
	0x6c, 0x14, 0x6f, 0x3a, 0x2e, 0x99, 0xe0, 0x61, 0x84, 0x65, 0xfa, 0x70, 0x86, 0xe6, 0xc3, 0xec,
	0x1e, 0xaf, 0xce, 0xaf, 0xb7, 0x04, 0xdd, 0x6c, 0x09, 0xfa, 0xbb, 0x25, 0xe8, 0x72, 0x47, 0x06,
	0x37, 0x3b, 0x32, 0xf8, 0xbd, 0x23, 0x83, 0x8f, 0x67, 0x07, 0x49, 0xa4, 0x50, 0xd2, 0x02, 0xdb,
	0x6f, 0xcb, 0xd7, 0xff, 0xf6, 0xc5, 0x87, 0xca, 0x1f, 0x79, 0x3f, 0xaf, 0xfe, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x07, 0x65, 0x16, 0xee, 0x53, 0x02, 0x00, 0x00,
}

func (m *VestingQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Released {
		i--
		if m.Released {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ReleaseTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ReleaseTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintVestingQueue(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.PayingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVestingQueue(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Auctioneer) > 0 {
		i -= len(m.Auctioneer)
		copy(dAtA[i:], m.Auctioneer)
		i = encodeVarintVestingQueue(dAtA, i, uint64(len(m.Auctioneer)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintVestingQueue(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVestingQueue(dAtA []byte, offset int, v uint64) int {
	offset -= sovVestingQueue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VestingQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovVestingQueue(uint64(m.AuctionId))
	}
	l = len(m.Auctioneer)
	if l > 0 {
		n += 1 + l + sovVestingQueue(uint64(l))
	}
	l = m.PayingCoin.Size()
	n += 1 + l + sovVestingQueue(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ReleaseTime)
	n += 1 + l + sovVestingQueue(uint64(l))
	if m.Released {
		n += 2
	}
	return n
}

func sovVestingQueue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVestingQueue(x uint64) (n int) {
	return sovVestingQueue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VestingQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctioneer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestingQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestingQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctioneer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PayingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ReleaseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Released", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Released = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVestingQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVestingQueue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVestingQueue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVestingQueue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVestingQueue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVestingQueue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVestingQueue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVestingQueue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVestingQueue = fmt.Errorf("proto: unexpected end of group")
)
