// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: modules/claim/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetClaimRecordRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetClaimRecordRequest) Reset()         { *m = QueryGetClaimRecordRequest{} }
func (m *QueryGetClaimRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetClaimRecordRequest) ProtoMessage()    {}
func (*QueryGetClaimRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{2}
}
func (m *QueryGetClaimRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClaimRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClaimRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClaimRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClaimRecordRequest.Merge(m, src)
}
func (m *QueryGetClaimRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClaimRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClaimRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClaimRecordRequest proto.InternalMessageInfo

func (m *QueryGetClaimRecordRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetClaimRecordResponse struct {
	ClaimRecord ClaimRecord `protobuf:"bytes,1,opt,name=claim_record,json=claimRecord,proto3" json:"claim_record"`
}

func (m *QueryGetClaimRecordResponse) Reset()         { *m = QueryGetClaimRecordResponse{} }
func (m *QueryGetClaimRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetClaimRecordResponse) ProtoMessage()    {}
func (*QueryGetClaimRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{3}
}
func (m *QueryGetClaimRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClaimRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClaimRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClaimRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClaimRecordResponse.Merge(m, src)
}
func (m *QueryGetClaimRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClaimRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClaimRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClaimRecordResponse proto.InternalMessageInfo

func (m *QueryGetClaimRecordResponse) GetClaimRecord() ClaimRecord {
	if m != nil {
		return m.ClaimRecord
	}
	return ClaimRecord{}
}

type QueryAllClaimRecordRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClaimRecordRequest) Reset()         { *m = QueryAllClaimRecordRequest{} }
func (m *QueryAllClaimRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllClaimRecordRequest) ProtoMessage()    {}
func (*QueryAllClaimRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{4}
}
func (m *QueryAllClaimRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClaimRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClaimRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClaimRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClaimRecordRequest.Merge(m, src)
}
func (m *QueryAllClaimRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClaimRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClaimRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClaimRecordRequest proto.InternalMessageInfo

func (m *QueryAllClaimRecordRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllClaimRecordResponse struct {
	ClaimRecord []ClaimRecord       `protobuf:"bytes,1,rep,name=claim_record,json=claimRecord,proto3" json:"claim_record"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClaimRecordResponse) Reset()         { *m = QueryAllClaimRecordResponse{} }
func (m *QueryAllClaimRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllClaimRecordResponse) ProtoMessage()    {}
func (*QueryAllClaimRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{5}
}
func (m *QueryAllClaimRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClaimRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClaimRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClaimRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClaimRecordResponse.Merge(m, src)
}
func (m *QueryAllClaimRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClaimRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClaimRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClaimRecordResponse proto.InternalMessageInfo

func (m *QueryAllClaimRecordResponse) GetClaimRecord() []ClaimRecord {
	if m != nil {
		return m.ClaimRecord
	}
	return nil
}

func (m *QueryAllClaimRecordResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMissionRequest struct {
	MissionId uint64 `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
}

func (m *QueryGetMissionRequest) Reset()         { *m = QueryGetMissionRequest{} }
func (m *QueryGetMissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMissionRequest) ProtoMessage()    {}
func (*QueryGetMissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{6}
}
func (m *QueryGetMissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMissionRequest.Merge(m, src)
}
func (m *QueryGetMissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMissionRequest proto.InternalMessageInfo

func (m *QueryGetMissionRequest) GetMissionId() uint64 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

type QueryGetMissionResponse struct {
	Mission Mission `protobuf:"bytes,1,opt,name=mission,proto3" json:"mission"`
}

func (m *QueryGetMissionResponse) Reset()         { *m = QueryGetMissionResponse{} }
func (m *QueryGetMissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMissionResponse) ProtoMessage()    {}
func (*QueryGetMissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{7}
}
func (m *QueryGetMissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMissionResponse.Merge(m, src)
}
func (m *QueryGetMissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMissionResponse proto.InternalMessageInfo

func (m *QueryGetMissionResponse) GetMission() Mission {
	if m != nil {
		return m.Mission
	}
	return Mission{}
}

type QueryAllMissionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMissionRequest) Reset()         { *m = QueryAllMissionRequest{} }
func (m *QueryAllMissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMissionRequest) ProtoMessage()    {}
func (*QueryAllMissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{8}
}
func (m *QueryAllMissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMissionRequest.Merge(m, src)
}
func (m *QueryAllMissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMissionRequest proto.InternalMessageInfo

func (m *QueryAllMissionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMissionResponse struct {
	Mission    []Mission           `protobuf:"bytes,1,rep,name=mission,proto3" json:"mission"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMissionResponse) Reset()         { *m = QueryAllMissionResponse{} }
func (m *QueryAllMissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMissionResponse) ProtoMessage()    {}
func (*QueryAllMissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{9}
}
func (m *QueryAllMissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMissionResponse.Merge(m, src)
}
func (m *QueryAllMissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMissionResponse proto.InternalMessageInfo

func (m *QueryAllMissionResponse) GetMission() []Mission {
	if m != nil {
		return m.Mission
	}
	return nil
}

func (m *QueryAllMissionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInitialClaimRequest struct {
}

func (m *QueryGetInitialClaimRequest) Reset()         { *m = QueryGetInitialClaimRequest{} }
func (m *QueryGetInitialClaimRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInitialClaimRequest) ProtoMessage()    {}
func (*QueryGetInitialClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{10}
}
func (m *QueryGetInitialClaimRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInitialClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInitialClaimRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInitialClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInitialClaimRequest.Merge(m, src)
}
func (m *QueryGetInitialClaimRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInitialClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInitialClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInitialClaimRequest proto.InternalMessageInfo

type QueryGetInitialClaimResponse struct {
	InitialClaim InitialClaim `protobuf:"bytes,1,opt,name=initial_claim,json=initialClaim,proto3" json:"initial_claim"`
}

func (m *QueryGetInitialClaimResponse) Reset()         { *m = QueryGetInitialClaimResponse{} }
func (m *QueryGetInitialClaimResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInitialClaimResponse) ProtoMessage()    {}
func (*QueryGetInitialClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{11}
}
func (m *QueryGetInitialClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInitialClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInitialClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInitialClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInitialClaimResponse.Merge(m, src)
}
func (m *QueryGetInitialClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInitialClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInitialClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInitialClaimResponse proto.InternalMessageInfo

func (m *QueryGetInitialClaimResponse) GetInitialClaim() InitialClaim {
	if m != nil {
		return m.InitialClaim
	}
	return InitialClaim{}
}

type QueryGetAirdropSupplyRequest struct {
}

func (m *QueryGetAirdropSupplyRequest) Reset()         { *m = QueryGetAirdropSupplyRequest{} }
func (m *QueryGetAirdropSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAirdropSupplyRequest) ProtoMessage()    {}
func (*QueryGetAirdropSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{12}
}
func (m *QueryGetAirdropSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAirdropSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAirdropSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAirdropSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAirdropSupplyRequest.Merge(m, src)
}
func (m *QueryGetAirdropSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAirdropSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAirdropSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAirdropSupplyRequest proto.InternalMessageInfo

type QueryGetAirdropSupplyResponse struct {
	AirdropSupply AirdropSupply `protobuf:"bytes,1,opt,name=airdrop_supply,json=airdropSupply,proto3" json:"airdrop_supply"`
}

func (m *QueryGetAirdropSupplyResponse) Reset()         { *m = QueryGetAirdropSupplyResponse{} }
func (m *QueryGetAirdropSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAirdropSupplyResponse) ProtoMessage()    {}
func (*QueryGetAirdropSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ec1262300aebdd6, []int{13}
}
func (m *QueryGetAirdropSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAirdropSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAirdropSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAirdropSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAirdropSupplyResponse.Merge(m, src)
}
func (m *QueryGetAirdropSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAirdropSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAirdropSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAirdropSupplyResponse proto.InternalMessageInfo

func (m *QueryGetAirdropSupplyResponse) GetAirdropSupply() AirdropSupply {
	if m != nil {
		return m.AirdropSupply
	}
	return AirdropSupply{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "modules.claim.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "modules.claim.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetClaimRecordRequest)(nil), "modules.claim.v1.QueryGetClaimRecordRequest")
	proto.RegisterType((*QueryGetClaimRecordResponse)(nil), "modules.claim.v1.QueryGetClaimRecordResponse")
	proto.RegisterType((*QueryAllClaimRecordRequest)(nil), "modules.claim.v1.QueryAllClaimRecordRequest")
	proto.RegisterType((*QueryAllClaimRecordResponse)(nil), "modules.claim.v1.QueryAllClaimRecordResponse")
	proto.RegisterType((*QueryGetMissionRequest)(nil), "modules.claim.v1.QueryGetMissionRequest")
	proto.RegisterType((*QueryGetMissionResponse)(nil), "modules.claim.v1.QueryGetMissionResponse")
	proto.RegisterType((*QueryAllMissionRequest)(nil), "modules.claim.v1.QueryAllMissionRequest")
	proto.RegisterType((*QueryAllMissionResponse)(nil), "modules.claim.v1.QueryAllMissionResponse")
	proto.RegisterType((*QueryGetInitialClaimRequest)(nil), "modules.claim.v1.QueryGetInitialClaimRequest")
	proto.RegisterType((*QueryGetInitialClaimResponse)(nil), "modules.claim.v1.QueryGetInitialClaimResponse")
	proto.RegisterType((*QueryGetAirdropSupplyRequest)(nil), "modules.claim.v1.QueryGetAirdropSupplyRequest")
	proto.RegisterType((*QueryGetAirdropSupplyResponse)(nil), "modules.claim.v1.QueryGetAirdropSupplyResponse")
}

func init() { proto.RegisterFile("modules/claim/v1/query.proto", fileDescriptor_2ec1262300aebdd6) }

var fileDescriptor_2ec1262300aebdd6 = []byte{
	// 827 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x6b, 0x13, 0x4d,
	0x18, 0xc7, 0xb3, 0x6d, 0xdf, 0xf6, 0xed, 0xf4, 0xe7, 0x3b, 0x6f, 0xd1, 0xba, 0x36, 0x1b, 0xdd,
	0x26, 0x6d, 0x8d, 0x71, 0x97, 0x54, 0x51, 0xc4, 0x53, 0x2a, 0xb4, 0x14, 0x2a, 0xd4, 0xd5, 0x93,
	0x97, 0xb8, 0x49, 0x86, 0x75, 0x60, 0x77, 0x67, 0xbb, 0xbb, 0x29, 0x96, 0x52, 0x0f, 0xde, 0xbc,
	0x09, 0xe2, 0x45, 0xe8, 0x41, 0xbc, 0x78, 0x12, 0xf1, 0xaf, 0xe8, 0xb1, 0xe0, 0xc5, 0x93, 0x48,
	0x2b, 0xf8, 0x6f, 0x48, 0x66, 0x9e, 0x90, 0xdd, 0xec, 0xa6, 0x89, 0xd2, 0x4b, 0x99, 0xce, 0x7c,
	0x9f, 0x79, 0x3e, 0xcf, 0xb3, 0xcf, 0x7c, 0x09, 0x5a, 0x70, 0x58, 0xa3, 0x69, 0x93, 0x40, 0xaf,
	0xdb, 0x26, 0x75, 0xf4, 0xdd, 0xb2, 0xbe, 0xd3, 0x24, 0xfe, 0x9e, 0xe6, 0xf9, 0x2c, 0x64, 0x78,
	0x16, 0x4e, 0x35, 0x7e, 0xaa, 0xed, 0x96, 0xe5, 0xff, 0x4c, 0x87, 0xba, 0x4c, 0xe7, 0x7f, 0x85,
	0x48, 0x2e, 0xd6, 0x59, 0xe0, 0xb0, 0x40, 0xaf, 0x99, 0x01, 0x11, 0xd1, 0xfa, 0x6e, 0xb9, 0x46,
	0x42, 0xb3, 0xac, 0x7b, 0xa6, 0x45, 0x5d, 0x33, 0xa4, 0xcc, 0x05, 0xed, 0x9c, 0xc5, 0x2c, 0xc6,
	0x97, 0x7a, 0x6b, 0x05, 0xbb, 0x0b, 0x16, 0x63, 0x96, 0x4d, 0x74, 0xd3, 0xa3, 0xba, 0xe9, 0xba,
	0x2c, 0xe4, 0x21, 0x01, 0x9c, 0x16, 0x12, 0x88, 0x26, 0xf5, 0x1b, 0x3e, 0xf3, 0xaa, 0x41, 0xd3,
	0xf3, 0x6c, 0x60, 0x95, 0x17, 0x13, 0x32, 0xbe, 0xa8, 0xfa, 0xa4, 0xce, 0xfc, 0x06, 0x88, 0xf2,
	0x09, 0x11, 0x75, 0x69, 0x48, 0x4d, 0xbb, 0x2a, 0x2a, 0x14, 0x2a, 0x25, 0xa1, 0x72, 0x68, 0x10,
	0x74, 0xaa, 0xc8, 0x26, 0xce, 0x3d, 0xd3, 0x37, 0x1d, 0x00, 0x56, 0xe7, 0x10, 0x7e, 0xd8, 0x6a,
	0xc3, 0x36, 0xdf, 0x34, 0xc8, 0x4e, 0x93, 0x04, 0xa1, 0x6a, 0xa0, 0xff, 0x63, 0xbb, 0x81, 0xc7,
	0xdc, 0x80, 0xe0, 0x7b, 0x68, 0x54, 0x04, 0xcf, 0x4b, 0x57, 0xa4, 0x95, 0x89, 0xd5, 0x79, 0xad,
	0xbb, 0xe7, 0x9a, 0x88, 0x58, 0x1b, 0x3f, 0xfa, 0x9e, 0xcb, 0x7c, 0xfc, 0xf5, 0xb9, 0x28, 0x19,
	0x10, 0xa2, 0xde, 0x46, 0x32, 0xbf, 0x73, 0x83, 0x84, 0xf7, 0x5b, 0x6a, 0x83, 0xd7, 0x0a, 0x19,
	0xf1, 0x3c, 0x1a, 0x33, 0x1b, 0x0d, 0x9f, 0x04, 0xe2, 0xee, 0x71, 0xa3, 0xfd, 0xaf, 0x4a, 0xd0,
	0xe5, 0xd4, 0x38, 0x60, 0x5a, 0x47, 0x93, 0xd1, 0xde, 0x01, 0x59, 0x36, 0x49, 0x16, 0x09, 0x5e,
	0x1b, 0x69, 0xe1, 0x19, 0x13, 0xf5, 0xce, 0x96, 0xda, 0x00, 0xbc, 0x8a, 0x6d, 0xa7, 0xe0, 0xad,
	0x23, 0xd4, 0x99, 0x0f, 0xc8, 0xb1, 0xa4, 0x89, 0x61, 0xd2, 0x5a, 0xc3, 0xa4, 0x89, 0x51, 0x84,
	0x61, 0xd2, 0xb6, 0x4d, 0x8b, 0x40, 0xac, 0x11, 0x89, 0x54, 0x3f, 0x49, 0x50, 0x4d, 0x77, 0x9a,
	0x9e, 0xd5, 0x0c, 0xff, 0x4d, 0x35, 0x78, 0x23, 0xc6, 0x3b, 0xc4, 0x79, 0x97, 0xfb, 0xf2, 0x0a,
	0x88, 0x18, 0xf0, 0x1d, 0x74, 0xa1, 0xdd, 0xfd, 0x07, 0x62, 0xae, 0xda, 0x2d, 0xc9, 0x22, 0x04,
	0x93, 0x56, 0xa5, 0xa2, 0xed, 0x23, 0xc6, 0x38, 0xec, 0x6c, 0x36, 0xd4, 0xc7, 0xe8, 0x62, 0x22,
	0x10, 0x8a, 0xbc, 0x8b, 0xc6, 0x40, 0x07, 0x9d, 0xbc, 0x94, 0xac, 0x0f, 0x62, 0xa0, 0xb6, 0xb6,
	0x5e, 0x7d, 0x0a, 0x38, 0x15, 0xdb, 0xee, 0xc2, 0x39, 0xaf, 0x2f, 0x74, 0x28, 0x01, 0x78, 0x34,
	0x45, 0x1a, 0xf8, 0xf0, 0x9f, 0x80, 0x9f, 0xdf, 0x07, 0xc9, 0x76, 0x9e, 0xc3, 0xa6, 0xb0, 0x03,
	0x18, 0x05, 0xf1, 0x72, 0x29, 0x5a, 0x48, 0x3f, 0x86, 0x12, 0x36, 0xd1, 0x54, 0xcc, 0x45, 0xa0,
	0x53, 0x4a, 0xb2, 0x90, 0x68, 0x38, 0x54, 0x33, 0x49, 0x23, 0x7b, 0xaa, 0xd2, 0x49, 0x55, 0x11,
	0x26, 0xf7, 0x88, 0x7b, 0x5c, 0x1b, 0xc5, 0x41, 0xd9, 0x1e, 0xe7, 0xc0, 0xb2, 0x85, 0xa6, 0xe3,
	0xee, 0x08, 0x30, 0xb9, 0x24, 0x4c, 0xec, 0x02, 0xa0, 0x99, 0x32, 0xa3, 0x9b, 0xab, 0x5f, 0xfe,
	0x45, 0xff, 0xf0, 0x7c, 0xf8, 0x05, 0x1a, 0x15, 0x36, 0x84, 0xf3, 0xc9, 0x9b, 0x92, 0x6e, 0x27,
	0x17, 0xfa, 0xa8, 0x04, 0xae, 0xba, 0xfc, 0xf2, 0xeb, 0xcf, 0x37, 0x43, 0x57, 0x71, 0x4e, 0xa7,
	0x96, 0x4b, 0x43, 0xa2, 0xf7, 0x70, 0x56, 0xfc, 0x41, 0x42, 0xd3, 0x71, 0xb7, 0xc2, 0xa5, 0x1e,
	0x29, 0x52, 0xcd, 0x50, 0xbe, 0x31, 0xa0, 0x1a, 0xc0, 0x6e, 0x71, 0x30, 0x0d, 0x97, 0xd2, 0xc1,
	0xa2, 0x86, 0xa2, 0xef, 0x83, 0xad, 0x1e, 0xe0, 0x77, 0x12, 0x9a, 0xd9, 0xa2, 0xc1, 0x40, 0x98,
	0xa9, 0xa6, 0xd8, 0x13, 0x33, 0xdd, 0xdb, 0xd4, 0x22, 0xc7, 0xcc, 0x63, 0xb5, 0x3f, 0x26, 0x7e,
	0x2b, 0x21, 0xd4, 0x71, 0x0e, 0xbc, 0xd2, 0xbb, 0x21, 0x71, 0x1b, 0x90, 0xaf, 0x0d, 0xa0, 0x04,
	0x9e, 0x55, 0xce, 0x53, 0xc2, 0xc5, 0x74, 0x1e, 0x78, 0xb9, 0xfa, 0x7e, 0xc7, 0xe5, 0x0e, 0xf0,
	0x2b, 0x09, 0x4d, 0xb4, 0x9a, 0xd6, 0x0f, 0x2c, 0xe1, 0x4f, 0x3d, 0xc1, 0x92, 0x36, 0xa3, 0x16,
	0x38, 0x58, 0x0e, 0x67, 0xcf, 0x04, 0xc3, 0x87, 0x12, 0x9a, 0xe9, 0x7a, 0xe6, 0xf8, 0x8c, 0xc9,
	0x49, 0x71, 0x0b, 0x59, 0x1b, 0x54, 0x0e, 0x64, 0xd7, 0x39, 0x59, 0x01, 0x2f, 0xa6, 0x93, 0xc5,
	0x9c, 0x05, 0xbf, 0x97, 0xd0, 0x6c, 0xf7, 0xdb, 0xc7, 0x67, 0x64, 0x4c, 0x33, 0x11, 0x59, 0x1f,
	0x58, 0x0f, 0x88, 0x25, 0x8e, 0xb8, 0x84, 0xf3, 0xe9, 0x88, 0x71, 0xc3, 0x59, 0xab, 0x1c, 0x9d,
	0x28, 0xd2, 0xf1, 0x89, 0x22, 0xfd, 0x38, 0x51, 0xa4, 0xd7, 0xa7, 0x4a, 0xe6, 0xf8, 0x54, 0xc9,
	0x7c, 0x3b, 0x55, 0x32, 0x4f, 0x96, 0x2d, 0x1a, 0x3e, 0x6b, 0xd6, 0xb4, 0x3a, 0x73, 0xba, 0x6f,
	0x7a, 0x0e, 0x77, 0x85, 0x7b, 0x1e, 0x09, 0x6a, 0xa3, 0xfc, 0x87, 0xd4, 0xcd, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xe3, 0xd6, 0x12, 0x0a, 0x9e, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of ClaimRecord items.
	GetClaimRecord(ctx context.Context, in *QueryGetClaimRecordRequest, opts ...grpc.CallOption) (*QueryGetClaimRecordResponse, error)
	ListClaimRecord(ctx context.Context, in *QueryAllClaimRecordRequest, opts ...grpc.CallOption) (*QueryAllClaimRecordResponse, error)
	// Queries a list of Mission items.
	GetMission(ctx context.Context, in *QueryGetMissionRequest, opts ...grpc.CallOption) (*QueryGetMissionResponse, error)
	ListMission(ctx context.Context, in *QueryAllMissionRequest, opts ...grpc.CallOption) (*QueryAllMissionResponse, error)
	// Queries a InitialClaim by index.
	GetInitialClaim(ctx context.Context, in *QueryGetInitialClaimRequest, opts ...grpc.CallOption) (*QueryGetInitialClaimResponse, error)
	// Queries a AirdropSupply by index.
	GetAirdropSupply(ctx context.Context, in *QueryGetAirdropSupplyRequest, opts ...grpc.CallOption) (*QueryGetAirdropSupplyResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/modules.claim.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetClaimRecord(ctx context.Context, in *QueryGetClaimRecordRequest, opts ...grpc.CallOption) (*QueryGetClaimRecordResponse, error) {
	out := new(QueryGetClaimRecordResponse)
	err := c.cc.Invoke(ctx, "/modules.claim.v1.Query/GetClaimRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListClaimRecord(ctx context.Context, in *QueryAllClaimRecordRequest, opts ...grpc.CallOption) (*QueryAllClaimRecordResponse, error) {
	out := new(QueryAllClaimRecordResponse)
	err := c.cc.Invoke(ctx, "/modules.claim.v1.Query/ListClaimRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMission(ctx context.Context, in *QueryGetMissionRequest, opts ...grpc.CallOption) (*QueryGetMissionResponse, error) {
	out := new(QueryGetMissionResponse)
	err := c.cc.Invoke(ctx, "/modules.claim.v1.Query/GetMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListMission(ctx context.Context, in *QueryAllMissionRequest, opts ...grpc.CallOption) (*QueryAllMissionResponse, error) {
	out := new(QueryAllMissionResponse)
	err := c.cc.Invoke(ctx, "/modules.claim.v1.Query/ListMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInitialClaim(ctx context.Context, in *QueryGetInitialClaimRequest, opts ...grpc.CallOption) (*QueryGetInitialClaimResponse, error) {
	out := new(QueryGetInitialClaimResponse)
	err := c.cc.Invoke(ctx, "/modules.claim.v1.Query/GetInitialClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAirdropSupply(ctx context.Context, in *QueryGetAirdropSupplyRequest, opts ...grpc.CallOption) (*QueryGetAirdropSupplyResponse, error) {
	out := new(QueryGetAirdropSupplyResponse)
	err := c.cc.Invoke(ctx, "/modules.claim.v1.Query/GetAirdropSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of ClaimRecord items.
	GetClaimRecord(context.Context, *QueryGetClaimRecordRequest) (*QueryGetClaimRecordResponse, error)
	ListClaimRecord(context.Context, *QueryAllClaimRecordRequest) (*QueryAllClaimRecordResponse, error)
	// Queries a list of Mission items.
	GetMission(context.Context, *QueryGetMissionRequest) (*QueryGetMissionResponse, error)
	ListMission(context.Context, *QueryAllMissionRequest) (*QueryAllMissionResponse, error)
	// Queries a InitialClaim by index.
	GetInitialClaim(context.Context, *QueryGetInitialClaimRequest) (*QueryGetInitialClaimResponse, error)
	// Queries a AirdropSupply by index.
	GetAirdropSupply(context.Context, *QueryGetAirdropSupplyRequest) (*QueryGetAirdropSupplyResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetClaimRecord(ctx context.Context, req *QueryGetClaimRecordRequest) (*QueryGetClaimRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimRecord not implemented")
}
func (*UnimplementedQueryServer) ListClaimRecord(ctx context.Context, req *QueryAllClaimRecordRequest) (*QueryAllClaimRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClaimRecord not implemented")
}
func (*UnimplementedQueryServer) GetMission(ctx context.Context, req *QueryGetMissionRequest) (*QueryGetMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMission not implemented")
}
func (*UnimplementedQueryServer) ListMission(ctx context.Context, req *QueryAllMissionRequest) (*QueryAllMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMission not implemented")
}
func (*UnimplementedQueryServer) GetInitialClaim(ctx context.Context, req *QueryGetInitialClaimRequest) (*QueryGetInitialClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInitialClaim not implemented")
}
func (*UnimplementedQueryServer) GetAirdropSupply(ctx context.Context, req *QueryGetAirdropSupplyRequest) (*QueryGetAirdropSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirdropSupply not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.claim.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetClaimRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClaimRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetClaimRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.claim.v1.Query/GetClaimRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetClaimRecord(ctx, req.(*QueryGetClaimRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListClaimRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClaimRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListClaimRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.claim.v1.Query/ListClaimRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListClaimRecord(ctx, req.(*QueryAllClaimRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.claim.v1.Query/GetMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMission(ctx, req.(*QueryGetMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.claim.v1.Query/ListMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListMission(ctx, req.(*QueryAllMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInitialClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInitialClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInitialClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.claim.v1.Query/GetInitialClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInitialClaim(ctx, req.(*QueryGetInitialClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAirdropSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAirdropSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAirdropSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modules.claim.v1.Query/GetAirdropSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAirdropSupply(ctx, req.(*QueryGetAirdropSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "modules.claim.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetClaimRecord",
			Handler:    _Query_GetClaimRecord_Handler,
		},
		{
			MethodName: "ListClaimRecord",
			Handler:    _Query_ListClaimRecord_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _Query_GetMission_Handler,
		},
		{
			MethodName: "ListMission",
			Handler:    _Query_ListMission_Handler,
		},
		{
			MethodName: "GetInitialClaim",
			Handler:    _Query_GetInitialClaim_Handler,
		},
		{
			MethodName: "GetAirdropSupply",
			Handler:    _Query_GetAirdropSupply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/claim/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetClaimRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClaimRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClaimRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClaimRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClaimRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClaimRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClaimRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllClaimRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClaimRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClaimRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClaimRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClaimRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClaimRecord) > 0 {
		for iNdEx := len(m.ClaimRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MissionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Mission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mission) > 0 {
		for iNdEx := len(m.Mission) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mission[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInitialClaimRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInitialClaimRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInitialClaimRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetInitialClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInitialClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInitialClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InitialClaim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAirdropSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAirdropSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAirdropSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAirdropSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAirdropSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAirdropSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AirdropSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetClaimRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClaimRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClaimRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllClaimRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllClaimRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimRecord) > 0 {
		for _, e := range m.ClaimRecord {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MissionId != 0 {
		n += 1 + sovQuery(uint64(m.MissionId))
	}
	return n
}

func (m *QueryGetMissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Mission.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mission) > 0 {
		for _, e := range m.Mission {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInitialClaimRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetInitialClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InitialClaim.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAirdropSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAirdropSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AirdropSupply.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClaimRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClaimRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClaimRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClaimRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClaimRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClaimRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClaimRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClaimRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClaimRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClaimRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClaimRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClaimRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimRecord = append(m.ClaimRecord, ClaimRecord{})
			if err := m.ClaimRecord[len(m.ClaimRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionId", wireType)
			}
			m.MissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Mission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mission = append(m.Mission, Mission{})
			if err := m.Mission[len(m.Mission)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInitialClaimRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInitialClaimRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInitialClaimRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInitialClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInitialClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInitialClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAirdropSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAirdropSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAirdropSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAirdropSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAirdropSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAirdropSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AirdropSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
