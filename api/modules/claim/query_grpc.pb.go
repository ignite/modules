// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: modules/claim/query.proto

package claim

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName         = "/modules.claim.Query/Params"
	Query_ClaimRecord_FullMethodName    = "/modules.claim.Query/ClaimRecord"
	Query_ClaimRecordAll_FullMethodName = "/modules.claim.Query/ClaimRecordAll"
	Query_Mission_FullMethodName        = "/modules.claim.Query/Mission"
	Query_MissionAll_FullMethodName     = "/modules.claim.Query/MissionAll"
	Query_AirdropSupply_FullMethodName  = "/modules.claim.Query/AirdropSupply"
	Query_InitialClaim_FullMethodName   = "/modules.claim.Query/InitialClaim"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a ClaimRecord by address.
	ClaimRecord(ctx context.Context, in *QueryGetClaimRecordRequest, opts ...grpc.CallOption) (*QueryGetClaimRecordResponse, error)
	// Queries a list of ClaimRecord items.
	ClaimRecordAll(ctx context.Context, in *QueryAllClaimRecordRequest, opts ...grpc.CallOption) (*QueryAllClaimRecordResponse, error)
	// Queries a Mission by ID.
	Mission(ctx context.Context, in *QueryGetMissionRequest, opts ...grpc.CallOption) (*QueryGetMissionResponse, error)
	// Queries a list of Mission items.
	MissionAll(ctx context.Context, in *QueryAllMissionRequest, opts ...grpc.CallOption) (*QueryAllMissionResponse, error)
	// Queries a AirdropSupply by index.
	AirdropSupply(ctx context.Context, in *QueryGetAirdropSupplyRequest, opts ...grpc.CallOption) (*QueryGetAirdropSupplyResponse, error)
	// Queries a InitialClaim by index.
	InitialClaim(ctx context.Context, in *QueryGetInitialClaimRequest, opts ...grpc.CallOption) (*QueryGetInitialClaimResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimRecord(ctx context.Context, in *QueryGetClaimRecordRequest, opts ...grpc.CallOption) (*QueryGetClaimRecordResponse, error) {
	out := new(QueryGetClaimRecordResponse)
	err := c.cc.Invoke(ctx, Query_ClaimRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimRecordAll(ctx context.Context, in *QueryAllClaimRecordRequest, opts ...grpc.CallOption) (*QueryAllClaimRecordResponse, error) {
	out := new(QueryAllClaimRecordResponse)
	err := c.cc.Invoke(ctx, Query_ClaimRecordAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mission(ctx context.Context, in *QueryGetMissionRequest, opts ...grpc.CallOption) (*QueryGetMissionResponse, error) {
	out := new(QueryGetMissionResponse)
	err := c.cc.Invoke(ctx, Query_Mission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MissionAll(ctx context.Context, in *QueryAllMissionRequest, opts ...grpc.CallOption) (*QueryAllMissionResponse, error) {
	out := new(QueryAllMissionResponse)
	err := c.cc.Invoke(ctx, Query_MissionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AirdropSupply(ctx context.Context, in *QueryGetAirdropSupplyRequest, opts ...grpc.CallOption) (*QueryGetAirdropSupplyResponse, error) {
	out := new(QueryGetAirdropSupplyResponse)
	err := c.cc.Invoke(ctx, Query_AirdropSupply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InitialClaim(ctx context.Context, in *QueryGetInitialClaimRequest, opts ...grpc.CallOption) (*QueryGetInitialClaimResponse, error) {
	out := new(QueryGetInitialClaimResponse)
	err := c.cc.Invoke(ctx, Query_InitialClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a ClaimRecord by address.
	ClaimRecord(context.Context, *QueryGetClaimRecordRequest) (*QueryGetClaimRecordResponse, error)
	// Queries a list of ClaimRecord items.
	ClaimRecordAll(context.Context, *QueryAllClaimRecordRequest) (*QueryAllClaimRecordResponse, error)
	// Queries a Mission by ID.
	Mission(context.Context, *QueryGetMissionRequest) (*QueryGetMissionResponse, error)
	// Queries a list of Mission items.
	MissionAll(context.Context, *QueryAllMissionRequest) (*QueryAllMissionResponse, error)
	// Queries a AirdropSupply by index.
	AirdropSupply(context.Context, *QueryGetAirdropSupplyRequest) (*QueryGetAirdropSupplyResponse, error)
	// Queries a InitialClaim by index.
	InitialClaim(context.Context, *QueryGetInitialClaimRequest) (*QueryGetInitialClaimResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) ClaimRecord(context.Context, *QueryGetClaimRecordRequest) (*QueryGetClaimRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRecord not implemented")
}
func (UnimplementedQueryServer) ClaimRecordAll(context.Context, *QueryAllClaimRecordRequest) (*QueryAllClaimRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRecordAll not implemented")
}
func (UnimplementedQueryServer) Mission(context.Context, *QueryGetMissionRequest) (*QueryGetMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mission not implemented")
}
func (UnimplementedQueryServer) MissionAll(context.Context, *QueryAllMissionRequest) (*QueryAllMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MissionAll not implemented")
}
func (UnimplementedQueryServer) AirdropSupply(context.Context, *QueryGetAirdropSupplyRequest) (*QueryGetAirdropSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirdropSupply not implemented")
}
func (UnimplementedQueryServer) InitialClaim(context.Context, *QueryGetInitialClaimRequest) (*QueryGetInitialClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitialClaim not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClaimRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ClaimRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimRecord(ctx, req.(*QueryGetClaimRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClaimRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ClaimRecordAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimRecordAll(ctx, req.(*QueryAllClaimRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Mission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mission(ctx, req.(*QueryGetMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MissionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MissionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MissionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MissionAll(ctx, req.(*QueryAllMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AirdropSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAirdropSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AirdropSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AirdropSupply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AirdropSupply(ctx, req.(*QueryGetAirdropSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InitialClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInitialClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InitialClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InitialClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InitialClaim(ctx, req.(*QueryGetInitialClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modules.claim.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ClaimRecord",
			Handler:    _Query_ClaimRecord_Handler,
		},
		{
			MethodName: "ClaimRecordAll",
			Handler:    _Query_ClaimRecordAll_Handler,
		},
		{
			MethodName: "Mission",
			Handler:    _Query_Mission_Handler,
		},
		{
			MethodName: "MissionAll",
			Handler:    _Query_MissionAll_Handler,
		},
		{
			MethodName: "AirdropSupply",
			Handler:    _Query_AirdropSupply_Handler,
		},
		{
			MethodName: "InitialClaim",
			Handler:    _Query_InitialClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/claim/query.proto",
}
