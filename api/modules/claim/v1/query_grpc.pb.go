// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: modules/claim/v1/query.proto

package claimv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName           = "/modules.claim.v1.Query/Params"
	Query_GetClaimRecord_FullMethodName   = "/modules.claim.v1.Query/GetClaimRecord"
	Query_ListClaimRecord_FullMethodName  = "/modules.claim.v1.Query/ListClaimRecord"
	Query_GetMission_FullMethodName       = "/modules.claim.v1.Query/GetMission"
	Query_ListMission_FullMethodName      = "/modules.claim.v1.Query/ListMission"
	Query_GetInitialClaim_FullMethodName  = "/modules.claim.v1.Query/GetInitialClaim"
	Query_GetAirdropSupply_FullMethodName = "/modules.claim.v1.Query/GetAirdropSupply"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of ClaimRecord items.
	GetClaimRecord(ctx context.Context, in *QueryGetClaimRecordRequest, opts ...grpc.CallOption) (*QueryGetClaimRecordResponse, error)
	ListClaimRecord(ctx context.Context, in *QueryAllClaimRecordRequest, opts ...grpc.CallOption) (*QueryAllClaimRecordResponse, error)
	// Queries a list of Mission items.
	GetMission(ctx context.Context, in *QueryGetMissionRequest, opts ...grpc.CallOption) (*QueryGetMissionResponse, error)
	ListMission(ctx context.Context, in *QueryAllMissionRequest, opts ...grpc.CallOption) (*QueryAllMissionResponse, error)
	// Queries a InitialClaim by index.
	GetInitialClaim(ctx context.Context, in *QueryGetInitialClaimRequest, opts ...grpc.CallOption) (*QueryGetInitialClaimResponse, error)
	// Queries a AirdropSupply by index.
	GetAirdropSupply(ctx context.Context, in *QueryGetAirdropSupplyRequest, opts ...grpc.CallOption) (*QueryGetAirdropSupplyResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetClaimRecord(ctx context.Context, in *QueryGetClaimRecordRequest, opts ...grpc.CallOption) (*QueryGetClaimRecordResponse, error) {
	out := new(QueryGetClaimRecordResponse)
	err := c.cc.Invoke(ctx, Query_GetClaimRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListClaimRecord(ctx context.Context, in *QueryAllClaimRecordRequest, opts ...grpc.CallOption) (*QueryAllClaimRecordResponse, error) {
	out := new(QueryAllClaimRecordResponse)
	err := c.cc.Invoke(ctx, Query_ListClaimRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMission(ctx context.Context, in *QueryGetMissionRequest, opts ...grpc.CallOption) (*QueryGetMissionResponse, error) {
	out := new(QueryGetMissionResponse)
	err := c.cc.Invoke(ctx, Query_GetMission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListMission(ctx context.Context, in *QueryAllMissionRequest, opts ...grpc.CallOption) (*QueryAllMissionResponse, error) {
	out := new(QueryAllMissionResponse)
	err := c.cc.Invoke(ctx, Query_ListMission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInitialClaim(ctx context.Context, in *QueryGetInitialClaimRequest, opts ...grpc.CallOption) (*QueryGetInitialClaimResponse, error) {
	out := new(QueryGetInitialClaimResponse)
	err := c.cc.Invoke(ctx, Query_GetInitialClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAirdropSupply(ctx context.Context, in *QueryGetAirdropSupplyRequest, opts ...grpc.CallOption) (*QueryGetAirdropSupplyResponse, error) {
	out := new(QueryGetAirdropSupplyResponse)
	err := c.cc.Invoke(ctx, Query_GetAirdropSupply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of ClaimRecord items.
	GetClaimRecord(context.Context, *QueryGetClaimRecordRequest) (*QueryGetClaimRecordResponse, error)
	ListClaimRecord(context.Context, *QueryAllClaimRecordRequest) (*QueryAllClaimRecordResponse, error)
	// Queries a list of Mission items.
	GetMission(context.Context, *QueryGetMissionRequest) (*QueryGetMissionResponse, error)
	ListMission(context.Context, *QueryAllMissionRequest) (*QueryAllMissionResponse, error)
	// Queries a InitialClaim by index.
	GetInitialClaim(context.Context, *QueryGetInitialClaimRequest) (*QueryGetInitialClaimResponse, error)
	// Queries a AirdropSupply by index.
	GetAirdropSupply(context.Context, *QueryGetAirdropSupplyRequest) (*QueryGetAirdropSupplyResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) GetClaimRecord(context.Context, *QueryGetClaimRecordRequest) (*QueryGetClaimRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimRecord not implemented")
}
func (UnimplementedQueryServer) ListClaimRecord(context.Context, *QueryAllClaimRecordRequest) (*QueryAllClaimRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClaimRecord not implemented")
}
func (UnimplementedQueryServer) GetMission(context.Context, *QueryGetMissionRequest) (*QueryGetMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMission not implemented")
}
func (UnimplementedQueryServer) ListMission(context.Context, *QueryAllMissionRequest) (*QueryAllMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMission not implemented")
}
func (UnimplementedQueryServer) GetInitialClaim(context.Context, *QueryGetInitialClaimRequest) (*QueryGetInitialClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInitialClaim not implemented")
}
func (UnimplementedQueryServer) GetAirdropSupply(context.Context, *QueryGetAirdropSupplyRequest) (*QueryGetAirdropSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirdropSupply not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetClaimRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClaimRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetClaimRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetClaimRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetClaimRecord(ctx, req.(*QueryGetClaimRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListClaimRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClaimRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListClaimRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListClaimRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListClaimRecord(ctx, req.(*QueryAllClaimRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMission(ctx, req.(*QueryGetMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListMission(ctx, req.(*QueryAllMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInitialClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInitialClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInitialClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetInitialClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInitialClaim(ctx, req.(*QueryGetInitialClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAirdropSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAirdropSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAirdropSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAirdropSupply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAirdropSupply(ctx, req.(*QueryGetAirdropSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modules.claim.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetClaimRecord",
			Handler:    _Query_GetClaimRecord_Handler,
		},
		{
			MethodName: "ListClaimRecord",
			Handler:    _Query_ListClaimRecord_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _Query_GetMission_Handler,
		},
		{
			MethodName: "ListMission",
			Handler:    _Query_ListMission_Handler,
		},
		{
			MethodName: "GetInitialClaim",
			Handler:    _Query_GetInitialClaim_Handler,
		},
		{
			MethodName: "GetAirdropSupply",
			Handler:    _Query_GetAirdropSupply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/claim/v1/query.proto",
}
